$date
	Fri May 16 09:21:38 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 32 ! pc_out [31:0] $end
$var wire 2 " mem_write_ma [1:0] $end
$var wire 2 # mem_read_ma [1:0] $end
$var wire 32 $ instr_if [31:0] $end
$var wire 32 % dmem_data_out [31:0] $end
$var wire 32 & dmem_data_in [31:0] $end
$var wire 32 ' alu_result_ma [31:0] $end
$var reg 1 ( clk $end
$var reg 1 ) reset $end
$var integer 32 * i [31:0] $end
$scope module cpu_t $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 + zero $end
$var wire 32 , rt_data_id [31:0] $end
$var wire 32 - rt_data_ex [31:0] $end
$var wire 32 . rs_data_id [31:0] $end
$var wire 32 / rs_data_ex [31:0] $end
$var wire 2 0 reg_write_select_wb [1:0] $end
$var wire 2 1 reg_write_select_ma [1:0] $end
$var wire 2 2 reg_write_select_id [1:0] $end
$var wire 2 3 reg_write_select_ex [1:0] $end
$var wire 1 4 reg_write_enable_wb $end
$var wire 1 5 reg_write_enable_ma $end
$var wire 1 6 reg_write_enable_id $end
$var wire 1 7 reg_write_enable_ex $end
$var wire 32 8 reg_write_data_wb [31:0] $end
$var wire 1 9 pc_sel $end
$var wire 32 : pc_plus_4_wb [31:0] $end
$var wire 32 ; pc_plus_4_ma [31:0] $end
$var wire 32 < pc_plus_4_if [31:0] $end
$var wire 32 = pc_out [31:0] $end
$var wire 32 > pc_ma [31:0] $end
$var wire 32 ? pc_initial_if [31:0] $end
$var wire 32 @ pc_id [31:0] $end
$var wire 32 A pc_ex [31:0] $end
$var wire 1 B op_sel_id $end
$var wire 1 C op_sel_ex $end
$var wire 2 D mem_write_ma [1:0] $end
$var wire 2 E mem_write_id [1:0] $end
$var wire 2 F mem_write_ex [1:0] $end
$var wire 2 G mem_read_ma [1:0] $end
$var wire 2 H mem_read_id [1:0] $end
$var wire 2 I mem_read_ex [1:0] $end
$var wire 5 J instr_wb [4:0] $end
$var wire 5 K instr_ma [4:0] $end
$var wire 32 L instr_if [31:0] $end
$var wire 32 M instr_id [31:0] $end
$var wire 5 N instr_ex [4:0] $end
$var wire 3 O imm_sel_id [2:0] $end
$var wire 32 P imm_id [31:0] $end
$var wire 32 Q imm_ex [31:0] $end
$var wire 32 R dmem_out_wb [31:0] $end
$var wire 32 S dmem_data_out [31:0] $end
$var wire 32 T dmem_data_in [31:0] $end
$var wire 2 U branch_jump_id [1:0] $end
$var wire 2 V branch_jump_ex [1:0] $end
$var wire 5 W aluop_id [4:0] $end
$var wire 32 X alu_result_wb [31:0] $end
$var wire 32 Y alu_result_ma [31:0] $end
$var wire 32 Z alu_result_ex [31:0] $end
$var wire 5 [ alu_op_ex [4:0] $end
$var wire 32 \ alu_input2_ex [31:0] $end
$scope module alu $end
$var wire 32 ] andData [31:0] $end
$var wire 32 ^ mulhData [31:0] $end
$var wire 32 _ mulhsuData [31:0] $end
$var wire 32 ` mulhuData [31:0] $end
$var wire 32 a orData [31:0] $end
$var wire 32 b xorData [31:0] $end
$var wire 32 c subData [31:0] $end
$var wire 32 d srlData [31:0] $end
$var wire 32 e sraData [31:0] $end
$var wire 32 f sltuData [31:0] $end
$var wire 32 g sltData [31:0] $end
$var wire 32 h sllData [31:0] $end
$var wire 32 i remuData [31:0] $end
$var wire 32 j remData [31:0] $end
$var wire 32 k mulData [31:0] $end
$var wire 32 l divuData [31:0] $end
$var wire 32 m divData [31:0] $end
$var wire 32 n addData [31:0] $end
$var wire 5 o SELECT [4:0] $end
$var wire 32 p DATA2 [31:0] $end
$var wire 32 q DATA1 [31:0] $end
$var reg 32 r RESULT [31:0] $end
$var reg 1 + ZERO $end
$upscope $end
$scope module alu_input2_mux $end
$var wire 1 C sel $end
$var wire 32 s out [31:0] $end
$var wire 32 t in1 [31:0] $end
$var wire 32 u in0 [31:0] $end
$upscope $end
$scope module branch_selector $end
$var wire 1 + ZERO $end
$var wire 2 v BRANCH_SEL [1:0] $end
$var reg 1 9 PC_SEL $end
$upscope $end
$scope module control_unit $end
$var wire 3 w funct3 [2:0] $end
$var wire 7 x funct7 [6:0] $end
$var wire 7 y opcode [6:0] $end
$var wire 2 z write_back_sel [1:0] $end
$var wire 1 B use_imm $end
$var wire 1 6 reg_write_en $end
$var wire 2 { mem_write [1:0] $end
$var wire 2 | mem_read [1:0] $end
$var wire 3 } imm_sel [2:0] $end
$var wire 2 ~ branch_sel [1:0] $end
$var wire 5 !" alu_op [4:0] $end
$upscope $end
$scope module data_mux $end
$var wire 32 "" in3 [31:0] $end
$var wire 2 #" sel [1:0] $end
$var wire 32 $" out [31:0] $end
$var wire 32 %" in2 [31:0] $end
$var wire 32 &" in1 [31:0] $end
$var wire 32 '" in0 [31:0] $end
$upscope $end
$scope module ex_ma_reg $end
$var wire 32 (" ALU_RESULT [31:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RESET $end
$var wire 2 )" REG_WRITE_SEL [1:0] $end
$var wire 1 7 REG_WRITE_ENABLE $end
$var wire 32 *" PC_PLUS_4 [31:0] $end
$var wire 2 +" MEM_WRITE [1:0] $end
$var wire 2 ," MEM_READ [1:0] $end
$var wire 32 -" IMMEDIATE [31:0] $end
$var wire 5 ." DEST_REG [4:0] $end
$var reg 32 /" OUT_ALU_RESULT [31:0] $end
$var reg 5 0" OUT_DEST_REG [4:0] $end
$var reg 32 1" OUT_IMMEDIATE [31:0] $end
$var reg 2 2" OUT_MEM_READ [1:0] $end
$var reg 2 3" OUT_MEM_WRITE [1:0] $end
$var reg 32 4" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 5 OUT_REG_WRITE_ENABLE $end
$var reg 2 5" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module id_ex_reg $end
$var wire 5 6" ALU_OP [4:0] $end
$var wire 2 7" BRANCH_JUMP [1:0] $end
$var wire 1 ( CLK $end
$var wire 5 8" DEST_REG [4:0] $end
$var wire 2 9" MEM_READ [1:0] $end
$var wire 2 :" MEM_WRITE [1:0] $end
$var wire 1 B OP_SEL $end
$var wire 1 6 REG_WRITE_ENABLE $end
$var wire 2 ;" REG_WRITE_SEL [1:0] $end
$var wire 1 ) RESET $end
$var wire 32 <" READ_DATA2 [31:0] $end
$var wire 32 =" READ_DATA1 [31:0] $end
$var wire 32 >" PC_PLUS_4 [31:0] $end
$var wire 32 ?" IMMEDIATE [31:0] $end
$var reg 5 @" OUT_ALU_OP [4:0] $end
$var reg 2 A" OUT_BRANCH_JUMP [1:0] $end
$var reg 5 B" OUT_DEST_REG [4:0] $end
$var reg 32 C" OUT_IMMEDIATE [31:0] $end
$var reg 2 D" OUT_MEM_READ [1:0] $end
$var reg 2 E" OUT_MEM_WRITE [1:0] $end
$var reg 1 C OUT_OP_SEL $end
$var reg 32 F" OUT_PC_PLUS_4 [31:0] $end
$var reg 32 G" OUT_READ_DATA1 [31:0] $end
$var reg 32 H" OUT_READ_DATA2 [31:0] $end
$var reg 1 7 OUT_REG_WRITE_ENABLE $end
$var reg 2 I" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module if_id_reg $end
$var wire 1 ( CLK $end
$var wire 1 ) RESET $end
$var wire 32 J" PC_PLUS_4 [31:0] $end
$var wire 32 K" INSTRUCTION [31:0] $end
$var reg 32 L" OUT_INSTRUCTION [31:0] $end
$var reg 32 M" OUT_PC_PLUS_4 [31:0] $end
$upscope $end
$scope module ma_wb_reg $end
$var wire 32 N" ALU_RESULT [31:0] $end
$var wire 1 ( CLK $end
$var wire 5 O" DEST_REG [4:0] $end
$var wire 1 5 REG_WRITE_ENABLE $end
$var wire 2 P" REG_WRITE_SEL [1:0] $end
$var wire 1 ) RESET $end
$var wire 32 Q" PC_PLUS_4 [31:0] $end
$var wire 32 R" DATA_OUT [31:0] $end
$var reg 32 S" OUT_ALU_RESULT [31:0] $end
$var reg 32 T" OUT_DATA_OUT [31:0] $end
$var reg 5 U" OUT_DEST_REG [4:0] $end
$var reg 32 V" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 4 OUT_REG_WRITE_ENABLE $end
$var reg 2 W" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 32 X" pc_in [31:0] $end
$var reg 32 Y" pc_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 Z" pc_in [31:0] $end
$var wire 32 [" pc_out [31:0] $end
$upscope $end
$scope module pc_adder_ma $end
$var wire 32 \" pc_in [31:0] $end
$var wire 32 ]" pc_out [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 ^" in0 [31:0] $end
$var wire 32 _" in1 [31:0] $end
$var wire 1 9 sel $end
$var wire 32 `" out [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 ( CLK $end
$var wire 32 a" DATA_OUT1 [31:0] $end
$var wire 32 b" DATA_OUT2 [31:0] $end
$var wire 5 c" OUT_ADDR1 [4:0] $end
$var wire 5 d" OUT_ADDR2 [4:0] $end
$var wire 1 ) RESET $end
$var wire 5 e" WRITE_ADDR [4:0] $end
$var wire 32 f" WRITE_DATA [31:0] $end
$var wire 1 4 WRITE_ENABLE $end
$var integer 32 g" i [31:0] $end
$upscope $end
$scope module sign_extender $end
$var wire 3 h" imm_sel [2:0] $end
$var wire 25 i" instr_25 [24:0] $end
$var wire 32 j" imm_u [31:0] $end
$var wire 12 k" imm_s [11:0] $end
$var wire 21 l" imm_j [20:0] $end
$var wire 12 m" imm_i [11:0] $end
$var wire 13 n" imm_b [12:0] $end
$var reg 32 o" imm_out [31:0] $end
$upscope $end
$upscope $end
$scope module dmem_t $end
$var wire 32 p" address [31:0] $end
$var wire 1 ( clk $end
$var wire 32 q" data_in [31:0] $end
$var wire 2 r" mem_read [1:0] $end
$var wire 2 s" mem_write [1:0] $end
$var wire 1 ) reset $end
$var reg 32 t" data_out [31:0] $end
$upscope $end
$scope module imem_t $end
$var wire 1 ( clk $end
$var wire 32 u" pc [31:0] $end
$var wire 1 ) reset $end
$var reg 32 v" instruction [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 w" \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 x" \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 y" \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 z" \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 {" \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 |" \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 }" \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ~" \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 !# \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 "# \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ## \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 $# \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 %# \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 &# \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 '# \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 (# \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 )# \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 *# \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 +# \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ,# \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 -# \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 .# \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 /# \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 0# \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 1# \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 2# \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 3# \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 4# \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 5# \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 6# \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 7# \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 8# \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
b0 u"
bz t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
bx h"
b100000 g"
bx f"
b0 e"
b0 d"
b0 c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
b0 \"
bx ["
b0 Z"
b0 Y"
bx X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
bz R"
bx Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
bx K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
b0 8"
bx 7"
bx 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
bx ("
b0 '"
b0 &"
b0 %"
bx $"
b0 #"
b0 ""
bx !"
bx ~
bx }
bx |
bx {
bx z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
bx s
bx r
b0 q
bx p
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
b0 [
bx Z
b0 Y
b0 X
bx W
b0 V
bx U
b0 T
bz S
b0 R
b0 Q
b0 P
bx O
b0 N
b0 M
bx L
b0 K
b0 J
b0 I
bx H
b0 G
b0 F
bx E
b0 D
0C
xB
b0 A
b0 @
bx ?
b0 >
b0 =
bx <
bx ;
b0 :
09
bx 8
07
x6
05
04
b0 3
bx 2
b0 1
b0 0
b0 /
bx .
b0 -
bx ,
0+
b100000 *
1)
0(
b0 '
b0 &
bz %
bx $
b0 #
b0 "
b0 !
$end
#1000
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 \
b0 p
b0 s
b0 8
b0 $"
b0 f"
b100 <
b100 ["
b100 ^"
b100 ;
b100 Q"
b100 ]"
#2000
b0 e
b0 d
b0 h
b100 ?
b100 X"
b100 `"
b0 ]
b0 O
b0 }
b0 h"
b0 E
b0 {
b0 :"
b0 H
b0 |
b0 9"
b1 2
b1 z
b1 ;"
b0 U
b0 ~
b0 7"
#3000
1+
b0 Z
b0 r
b0 ("
b0 _"
b0 .
b0 ="
b0 a"
b0 ,
b0 <"
b0 b"
b0 f
b0 g
b0 a
b0 b
b0 n
16
0B
b0 W
b0 !"
b0 6"
#4000
b0 $
b0 L
b0 K"
b0 v"
b0 c
1(
b0 `
b0 _
b0 ^
#5000
b0 i
b0 j
b0 l
b0 m
b0 k
#8000
0(
0)
#12000
17
b1 3
b1 )"
b1 I"
bz R
bz %"
bz T"
b100 :
b100 '"
b100 V"
b10100000000000010010011 $
b10100000000000010010011 L
b10100000000000010010011 K"
b10100000000000010010011 v"
1(
#13000
b100 8
b100 $"
b100 f"
#14000
b100 !
b100 =
b100 J"
b100 Y"
b100 Z"
b100 u"
#15000
b1000 <
b1000 ["
b1000 ^"
#16000
b1000 ?
b1000 X"
b1000 `"
0(
#20000
b101 P
b101 ?"
b101 o"
b101 m"
b1 k"
b100000000000 n"
b10100000000000000000000 j"
b100000000100 l"
b1 8"
b1010000000000001 i"
b10011 y
b101 d"
15
b1 1
b1 5"
b1 P"
b100 @
b100 >"
b100 M"
b10100000000000010010011 M
b10100000000000010010011 L"
b1100000000000100010011 $
b1100000000000100010011 L
b1100000000000100010011 K"
b1100000000000100010011 v"
1(
#22000
b1000 !
b1000 =
b1000 J"
b1000 Y"
b1000 Z"
b1000 u"
#23000
b1100 <
b1100 ["
b1100 ^"
1B
#24000
b1100 ?
b1100 X"
b1100 `"
0(
#28000
b11 P
b11 ?"
b11 o"
b11 m"
b10 k"
b10 n"
b1100000000000000000000 j"
b100000000010 l"
b10 8"
b110000000000010 i"
b11 d"
b1000 @
b1000 >"
b1000 M"
b1100000000000100010011 M
b1100000000000100010011 L"
1C
b101 Q
b101 t
b101 -"
b101 C"
b100 A
b100 *"
b100 F"
b1 N
b1 ."
b1 B"
14
b1 0
b1 #"
b1 W"
b1000010011 $
b1000010011 L
b1000010011 K"
b1000010011 v"
1(
#29000
b101 \
b101 p
b101 s
b0 8
b0 $"
b0 f"
#30000
b1100 !
b1100 =
b1100 J"
b1100 Y"
b1100 Z"
b1100 u"
#31000
0+
b101 Z
b101 r
b101 ("
b101 _"
b10000 <
b10000 ["
b10000 ^"
b1 f
b1 g
b101 a
b101 b
b101 n
#32000
b10000 ?
b10000 X"
b10000 `"
b11111111111111111111111111111011 c
0(
#36000
b0 P
b0 ?"
b0 o"
b0 m"
b100 k"
b100 n"
b0 j"
b0 l"
b100 8"
b100 i"
b0 d"
b101 &
b101 T
b101 1"
b101 q"
b100 >
b100 4"
b100 \"
b1 K
b1 0"
b1 O"
b101 '
b101 Y
b101 /"
b101 N"
b101 p"
b11 Q
b11 t
b11 -"
b11 C"
b1000 A
b1000 *"
b1000 F"
b10 N
b10 ."
b10 B"
b1100 @
b1100 >"
b1100 M"
b1000010011 M
b1000010011 L"
b1010010011 $
b1010010011 L
b1010010011 K"
b1010010011 v"
1(
#37000
b11 \
b11 p
b11 s
b1000 ;
b1000 Q"
b1000 ]"
#38000
b10000 !
b10000 =
b10000 J"
b10000 Y"
b10000 Z"
b10000 u"
#39000
b11 Z
b11 r
b11 ("
b11 _"
b10100 <
b10100 ["
b10100 ^"
b11 a
b11 b
b11 n
#40000
b10100 ?
b10100 X"
b10100 `"
b11111111111111111111111111111101 c
0(
#44000
b101 k"
b100000000100 n"
b101 8"
b101 i"
b10000 @
b10000 >"
b10000 M"
b1010010011 M
b1010010011 L"
b0 Q
b0 t
b0 -"
b0 C"
b1100 A
b1100 *"
b1100 F"
b100 N
b100 ."
b100 B"
b11 &
b11 T
b11 1"
b11 q"
b1000 >
b1000 4"
b1000 \"
b10 K
b10 0"
b10 O"
b11 '
b11 Y
b11 /"
b11 N"
b11 p"
b1000 :
b1000 '"
b1000 V"
b1 J
b1 U"
b1 e"
b101 X
b101 &"
b101 S"
b1100010011 $
b1100010011 L
b1100010011 K"
b1100010011 v"
1(
#45000
b101 8
b101 $"
b101 f"
b0 \
b0 p
b0 s
b1100 ;
b1100 Q"
b1100 ]"
#46000
b10100 !
b10100 =
b10100 J"
b10100 Y"
b10100 Z"
b10100 u"
#47000
1+
b0 Z
b0 r
b0 ("
b0 _"
b11000 <
b11000 ["
b11000 ^"
b0 f
b0 g
b0 a
b0 b
b0 n
#48000
b11000 ?
b11000 X"
b11000 `"
b0 c
0(
#49000
b101 x"
#52000
b110 k"
b110 n"
b110 8"
b110 i"
b1100 :
b1100 '"
b1100 V"
b10 J
b10 U"
b10 e"
b11 X
b11 &"
b11 S"
b0 &
b0 T
b0 1"
b0 q"
b1100 >
b1100 4"
b1100 \"
b100 K
b100 0"
b100 O"
b0 '
b0 Y
b0 /"
b0 N"
b0 p"
b10000 A
b10000 *"
b10000 F"
b101 N
b101 ."
b101 B"
b10100 @
b10100 >"
b10100 M"
b1100010011 M
b1100010011 L"
b1110010011 $
b1110010011 L
b1110010011 K"
b1110010011 v"
1(
#53000
b11 8
b11 $"
b11 f"
b10000 ;
b10000 Q"
b10000 ]"
#54000
b11000 !
b11000 =
b11000 J"
b11000 Y"
b11000 Z"
b11000 u"
#55000
b11100 <
b11100 ["
b11100 ^"
#56000
b11100 ?
b11100 X"
b11100 `"
0(
#57000
b11 y"
#60000
b111 k"
b100000000110 n"
b111 8"
b111 i"
b11000 @
b11000 >"
b11000 M"
b1110010011 M
b1110010011 L"
b10100 A
b10100 *"
b10100 F"
b110 N
b110 ."
b110 B"
b10000 >
b10000 4"
b10000 \"
b101 K
b101 0"
b101 O"
b10000 :
b10000 '"
b10000 V"
b100 J
b100 U"
b100 e"
b0 X
b0 &"
b0 S"
b1000001000000110110011 $
b1000001000000110110011 L
b1000001000000110110011 K"
b1000001000000110110011 v"
1(
#61000
b0 8
b0 $"
b0 f"
b10100 ;
b10100 Q"
b10100 ]"
#62000
b11100 !
b11100 =
b11100 J"
b11100 Y"
b11100 Z"
b11100 u"
#63000
b100000 <
b100000 ["
b100000 ^"
#64000
b100000 ?
b100000 X"
b100000 `"
0(
#65000
b0 {"
#68000
b10 P
b10 ?"
b10 o"
b10 m"
b11 k"
b100000000010 n"
b1000001000000000000000 j"
b1000000000000010 l"
b11 8"
b100000100000011 i"
b110011 y
b10 d"
b1 c"
b10100 :
b10100 '"
b10100 V"
b101 J
b101 U"
b101 e"
b10100 >
b10100 4"
b10100 \"
b110 K
b110 0"
b110 O"
b11000 A
b11000 *"
b11000 F"
b111 N
b111 ."
b111 B"
b11100 @
b11100 >"
b11100 M"
b1000001000000110110011 M
b1000001000000110110011 L"
bx $
bx L
bx K"
bx v"
1(
#69000
b11000 ;
b11000 Q"
b11000 ]"
#70000
b100000 !
b100000 =
b100000 J"
b100000 Y"
b100000 Z"
b100000 u"
b11 ,
b11 <"
b11 b"
b101 .
b101 ="
b101 a"
#71000
b100100 <
b100100 ["
b100100 ^"
0B
#72000
b100100 ?
b100100 X"
b100100 `"
0(
#73000
b0 |"
#76000
bx P
bx ?"
bx o"
bx m"
bx k"
bx0 n"
bx000000000000 j"
bx0 l"
bx 8"
bx i"
bx x
bx w
bx y
bx d"
bx c"
b100000 @
b100000 >"
b100000 M"
bx M
bx L"
0C
b10 Q
b10 t
b10 -"
b10 C"
b11 -
b11 u
b11 H"
b101 /
b101 q
b101 G"
b11100 A
b11100 *"
b11100 F"
b11 N
b11 ."
b11 B"
b11000 >
b11000 4"
b11000 \"
b111 K
b111 0"
b111 O"
b11000 :
b11000 '"
b11000 V"
b110 J
b110 U"
b110 e"
1(
#77000
b11 \
b11 p
b11 s
b101 e
b101 d
b101 h
b11100 ;
b11100 Q"
b11100 ]"
#78000
b100100 !
b100100 =
b100100 J"
b100100 Y"
b100100 Z"
b100100 u"
b0 P
b0 ?"
b0 o"
b0 e
b0 d
b101000 h
bx O
bx }
bx h"
b0x E
b0x {
b0x :"
b0x H
b0x |
b0x 9"
bx 2
bx z
bx ;"
bx U
bx ~
bx 7"
bx ,
bx <"
bx b"
bx .
bx ="
bx a"
#79000
0+
b1000 Z
b1000 r
b1000 ("
b1000 _"
b101000 <
b101000 ["
b101000 ^"
b1 ]
b111 a
b110 b
b1000 n
x6
xB
bx W
bx !"
bx 6"
#80000
b101000 ?
b101000 X"
b101000 `"
b10 c
0(
#81000
b0 }"
b10 i
b10 j
b1 l
b1 m
b1111 k
#84000
1+
b0 Z
b0 r
b0 ("
b0 _"
b11100 :
b11100 '"
b11100 V"
b111 J
b111 U"
b111 e"
b10 &
b10 T
b10 1"
b10 q"
b11100 >
b11100 4"
b11100 \"
b11 K
b11 0"
b11 O"
b1000 '
b1000 Y
b1000 /"
b1000 N"
b1000 p"
x7
bx 3
bx )"
bx I"
b0x I
b0x ,"
b0x D"
b0x F
b0x +"
b0x E"
xC
bx V
bx v
bx A"
bx [
bx o
bx @"
b0 Q
b0 t
b0 -"
b0 C"
bx -
bx u
bx H"
bx /
bx q
bx G"
b100000 A
b100000 *"
b100000 F"
bx N
bx ."
bx B"
b100100 @
b100100 >"
b100100 M"
1(
#85000
bx \
bx p
bx s
b100000 ;
b100000 Q"
b100000 ]"
bx e
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxx d
bx000 h
#86000
b101000 !
b101000 =
b101000 J"
b101000 Y"
b101000 Z"
b101000 u"
bx d
bx h
b0x f
b0x g
bx b
bx n
#87000
b101100 <
b101100 ["
b101100 ^"
bx ]
bx a
bx c
#88000
b101100 ?
b101100 X"
b101100 `"
bx i
bx j
bx l
bx m
bx k
0(
#89000
b0 ~"
#92000
b101000 @
b101000 >"
b101000 M"
b100100 A
b100100 *"
b100100 F"
x5
bx 1
bx 5"
bx P"
b0x #
b0x G
b0x 2"
b0x r"
b0x "
b0x D
b0x 3"
b0x s"
b0 &
b0 T
b0 1"
b0 q"
b100000 >
b100000 4"
b100000 \"
bx K
bx 0"
bx O"
b0 '
b0 Y
b0 /"
b0 N"
b0 p"
b100000 :
b100000 '"
b100000 V"
b11 J
b11 U"
b11 e"
b1000 X
b1000 &"
b1000 S"
1(
#93000
b1000 8
b1000 $"
b1000 f"
b100100 ;
b100100 Q"
b100100 ]"
#94000
b101100 !
b101100 =
b101100 J"
b101100 Y"
b101100 Z"
b101100 u"
#95000
b110000 <
b110000 ["
b110000 ^"
#96000
b110000 ?
b110000 X"
b110000 `"
0(
#97000
b1000 z"
#100000
x4
bx 0
bx #"
bx W"
b100100 :
b100100 '"
b100100 V"
bx J
bx U"
bx e"
b0 X
b0 &"
b0 S"
b100100 >
b100100 4"
b100100 \"
b101000 A
b101000 *"
b101000 F"
b101100 @
b101100 >"
b101100 M"
1(
#101000
bx 8
bx $"
bx f"
b101000 ;
b101000 Q"
b101000 ]"
#102000
b110000 !
b110000 =
b110000 J"
b110000 Y"
b110000 Z"
b110000 u"
#103000
b110100 <
b110100 ["
b110100 ^"
#104000
b110100 ?
b110100 X"
b110100 `"
0(
#108000
b110000 @
b110000 >"
b110000 M"
b101100 A
b101100 *"
b101100 F"
b101000 >
b101000 4"
b101000 \"
b101000 :
b101000 '"
b101000 V"
1(
#109000
b101100 ;
b101100 Q"
b101100 ]"
#110000
b110100 !
b110100 =
b110100 J"
b110100 Y"
b110100 Z"
b110100 u"
#111000
b111000 <
b111000 ["
b111000 ^"
#112000
b111000 ?
b111000 X"
b111000 `"
0(
#116000
b101100 :
b101100 '"
b101100 V"
b101100 >
b101100 4"
b101100 \"
b110000 A
b110000 *"
b110000 F"
b110100 @
b110100 >"
b110100 M"
1(
