$date
	Fri May 02 15:19:14 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var wire 32 ! pc_out [31:0] $end
$var wire 2 " mem_write_ma [1:0] $end
$var wire 2 # mem_read_ma [1:0] $end
$var wire 32 $ instr_if [31:0] $end
$var wire 32 % dmem_data_out [31:0] $end
$var wire 32 & dmem_data_in [31:0] $end
$var wire 32 ' alu_result_ma [31:0] $end
$var reg 1 ( clk $end
$var reg 1 ) reset $end
$var integer 32 * i [31:0] $end
$scope module cpu_t $end
$var wire 3 + branch_jump_id [2:0] $end
$var wire 1 ( clk $end
$var wire 3 , imm_sel_id [2:0] $end
$var wire 2 - mem_read_id [1:0] $end
$var wire 2 . mem_write_id [1:0] $end
$var wire 1 / op1_sel_id $end
$var wire 1 0 reg_write_enable_id $end
$var wire 2 1 reg_write_select_id [1:0] $end
$var wire 1 ) reset $end
$var wire 32 2 rt_data_id [31:0] $end
$var wire 32 3 rt_data_ex [31:0] $end
$var wire 32 4 rs_data_id [31:0] $end
$var wire 32 5 rs_data_ex [31:0] $end
$var wire 2 6 reg_write_select_wb [1:0] $end
$var wire 2 7 reg_write_select_ma [1:0] $end
$var wire 2 8 reg_write_select_ex [1:0] $end
$var wire 1 9 reg_write_enable_wb $end
$var wire 1 : reg_write_enable_ma $end
$var wire 1 ; reg_write_enable_ex $end
$var wire 32 < reg_write_data_wb [31:0] $end
$var wire 32 = pc_plus_4_wb [31:0] $end
$var wire 32 > pc_plus_4_ma [31:0] $end
$var wire 32 ? pc_plus_4_if [31:0] $end
$var wire 32 @ pc_out [31:0] $end
$var wire 32 A pc_ma [31:0] $end
$var wire 32 B pc_initial_if [31:0] $end
$var wire 32 C pc_id [31:0] $end
$var wire 32 D pc_ex [31:0] $end
$var wire 1 E op2_sel_id $end
$var wire 1 F op2_sel_ex $end
$var wire 1 G op1_sel_ex $end
$var wire 2 H mem_write_ma [1:0] $end
$var wire 2 I mem_write_ex [1:0] $end
$var wire 2 J mem_read_ma [1:0] $end
$var wire 2 K mem_read_ex [1:0] $end
$var wire 5 L instr_wb [4:0] $end
$var wire 5 M instr_ma [4:0] $end
$var wire 32 N instr_if [31:0] $end
$var wire 32 O instr_id [31:0] $end
$var wire 5 P instr_ex [4:0] $end
$var wire 32 Q imm_ex [31:0] $end
$var wire 32 R dmem_out_wb [31:0] $end
$var wire 32 S dmem_data_out [31:0] $end
$var wire 32 T dmem_data_in [31:0] $end
$var wire 3 U branch_jump_ex [2:0] $end
$var wire 5 V aluop_id [4:0] $end
$var wire 32 W alu_result_wb [31:0] $end
$var wire 32 X alu_result_ma [31:0] $end
$var wire 32 Y alu_result_ex [31:0] $end
$var wire 5 Z alu_op_ex [4:0] $end
$var wire 32 [ alu_input2_ex [31:0] $end
$var wire 32 \ alu_input1_ex [31:0] $end
$scope module alu $end
$var wire 32 ] andData [31:0] $end
$var wire 32 ^ mulhData [31:0] $end
$var wire 32 _ mulhsuData [31:0] $end
$var wire 32 ` mulhuData [31:0] $end
$var wire 32 a orData [31:0] $end
$var wire 32 b xorData [31:0] $end
$var wire 32 c subData [31:0] $end
$var wire 32 d srlData [31:0] $end
$var wire 32 e sraData [31:0] $end
$var wire 32 f sltuData [31:0] $end
$var wire 32 g sltData [31:0] $end
$var wire 32 h sllData [31:0] $end
$var wire 32 i remuData [31:0] $end
$var wire 32 j remData [31:0] $end
$var wire 32 k mulData [31:0] $end
$var wire 32 l divuData [31:0] $end
$var wire 32 m divData [31:0] $end
$var wire 32 n addData [31:0] $end
$var wire 5 o SELECT [4:0] $end
$var wire 32 p DATA2 [31:0] $end
$var wire 32 q DATA1 [31:0] $end
$var reg 32 r RESULT [31:0] $end
$upscope $end
$scope module alu_input1_mux $end
$var wire 1 G sel $end
$var wire 32 s out [31:0] $end
$var wire 32 t in1 [31:0] $end
$var wire 32 u in0 [31:0] $end
$upscope $end
$scope module alu_input2_mux $end
$var wire 1 F sel $end
$var wire 32 v out [31:0] $end
$var wire 32 w in1 [31:0] $end
$var wire 32 x in0 [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 3 y branch_jump [2:0] $end
$var wire 3 z funct3 [2:0] $end
$var wire 7 { funct7 [6:0] $end
$var wire 3 | imm_sel [2:0] $end
$var wire 2 } mem_read [1:0] $end
$var wire 2 ~ mem_write [1:0] $end
$var wire 1 / op1_sel $end
$var wire 7 !" opcode [6:0] $end
$var wire 1 0 reg_write_enable $end
$var wire 2 "" reg_write_select [1:0] $end
$var wire 1 E op2_sel $end
$var wire 5 #" aluop [4:0] $end
$upscope $end
$scope module data_mux $end
$var wire 32 $" in3 [31:0] $end
$var wire 2 %" sel [1:0] $end
$var wire 32 &" out [31:0] $end
$var wire 32 '" in2 [31:0] $end
$var wire 32 (" in1 [31:0] $end
$var wire 32 )" in0 [31:0] $end
$upscope $end
$scope module ex_ma_reg $end
$var wire 32 *" ALU_RESULT [31:0] $end
$var wire 1 ( CLK $end
$var wire 1 ) RESET $end
$var wire 2 +" REG_WRITE_SEL [1:0] $end
$var wire 1 ; REG_WRITE_ENABLE $end
$var wire 32 ," PC_PLUS_4 [31:0] $end
$var wire 2 -" MEM_WRITE [1:0] $end
$var wire 2 ." MEM_READ [1:0] $end
$var wire 32 /" IMMEDIATE [31:0] $end
$var wire 5 0" DEST_REG [4:0] $end
$var reg 32 1" OUT_ALU_RESULT [31:0] $end
$var reg 5 2" OUT_DEST_REG [4:0] $end
$var reg 32 3" OUT_IMMEDIATE [31:0] $end
$var reg 2 4" OUT_MEM_READ [1:0] $end
$var reg 2 5" OUT_MEM_WRITE [1:0] $end
$var reg 32 6" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 : OUT_REG_WRITE_ENABLE $end
$var reg 2 7" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module id_ex_reg $end
$var wire 5 8" ALU_OP [4:0] $end
$var wire 3 9" BRANCH_JUMP [2:0] $end
$var wire 1 ( CLK $end
$var wire 5 :" DEST_REG [4:0] $end
$var wire 32 ;" IMMEDIATE [31:0] $end
$var wire 2 <" MEM_READ [1:0] $end
$var wire 2 =" MEM_WRITE [1:0] $end
$var wire 1 / OP1_SEL $end
$var wire 1 E OP2_SEL $end
$var wire 1 0 REG_WRITE_ENABLE $end
$var wire 2 >" REG_WRITE_SEL [1:0] $end
$var wire 1 ) RESET $end
$var wire 32 ?" READ_DATA2 [31:0] $end
$var wire 32 @" READ_DATA1 [31:0] $end
$var wire 32 A" PC_PLUS_4 [31:0] $end
$var reg 5 B" OUT_ALU_OP [4:0] $end
$var reg 3 C" OUT_BRANCH_JUMP [2:0] $end
$var reg 5 D" OUT_DEST_REG [4:0] $end
$var reg 32 E" OUT_IMMEDIATE [31:0] $end
$var reg 2 F" OUT_MEM_READ [1:0] $end
$var reg 2 G" OUT_MEM_WRITE [1:0] $end
$var reg 1 G OUT_OP1_SEL $end
$var reg 1 F OUT_OP2_SEL $end
$var reg 32 H" OUT_PC_PLUS_4 [31:0] $end
$var reg 32 I" OUT_READ_DATA1 [31:0] $end
$var reg 32 J" OUT_READ_DATA2 [31:0] $end
$var reg 1 ; OUT_REG_WRITE_ENABLE $end
$var reg 2 K" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module if_id_reg $end
$var wire 1 ( CLK $end
$var wire 1 ) RESET $end
$var wire 32 L" PC_PLUS_4 [31:0] $end
$var wire 32 M" INSTRUCTION [31:0] $end
$var reg 32 N" OUT_INSTRUCTION [31:0] $end
$var reg 32 O" OUT_PC_PLUS_4 [31:0] $end
$upscope $end
$scope module ma_wb_reg $end
$var wire 32 P" ALU_RESULT [31:0] $end
$var wire 1 ( CLK $end
$var wire 5 Q" DEST_REG [4:0] $end
$var wire 1 : REG_WRITE_ENABLE $end
$var wire 2 R" REG_WRITE_SEL [1:0] $end
$var wire 1 ) RESET $end
$var wire 32 S" PC_PLUS_4 [31:0] $end
$var wire 32 T" DATA_OUT [31:0] $end
$var reg 32 U" OUT_ALU_RESULT [31:0] $end
$var reg 32 V" OUT_DATA_OUT [31:0] $end
$var reg 5 W" OUT_DEST_REG [4:0] $end
$var reg 32 X" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 9 OUT_REG_WRITE_ENABLE $end
$var reg 2 Y" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 32 Z" pc_in [31:0] $end
$var reg 32 [" pc_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 \" pc_in [31:0] $end
$var wire 32 ]" pc_out [31:0] $end
$upscope $end
$scope module pc_adder_ma $end
$var wire 32 ^" pc_in [31:0] $end
$var wire 32 _" pc_out [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 `" in0 [31:0] $end
$var wire 32 a" in1 [31:0] $end
$var wire 32 b" out [31:0] $end
$var wire 1 c" sel $end
$upscope $end
$scope module reg_file $end
$var wire 1 ( CLK $end
$var wire 32 d" DATA_OUT1 [31:0] $end
$var wire 32 e" DATA_OUT2 [31:0] $end
$var wire 5 f" OUT_ADDR1 [4:0] $end
$var wire 5 g" OUT_ADDR2 [4:0] $end
$var wire 1 ) RESET $end
$var wire 5 h" WRITE_ADDR [4:0] $end
$var wire 32 i" WRITE_DATA [31:0] $end
$var wire 1 9 WRITE_ENABLE $end
$var integer 32 j" i [31:0] $end
$upscope $end
$upscope $end
$scope module dmem_t $end
$var wire 32 k" address [31:0] $end
$var wire 1 ( clk $end
$var wire 32 l" data_in [31:0] $end
$var wire 2 m" mem_read [1:0] $end
$var wire 2 n" mem_write [1:0] $end
$var wire 1 ) reset $end
$var reg 32 o" data_out [31:0] $end
$upscope $end
$scope module imem_t $end
$var wire 1 ( clk $end
$var wire 32 p" pc [31:0] $end
$var wire 1 ) reset $end
$var reg 32 q" instruction [31:0] $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 r" \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 s" \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 t" \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 u" \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 v" \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 w" \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 x" \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 y" \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 z" \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 {" \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 |" \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 }" \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ~" \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 !# \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 "# \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ## \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 $# \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 %# \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 &# \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 '# \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 (# \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 )# \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 *# \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 +# \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 ,# \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 -# \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 .# \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 /# \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 0# \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 1# \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 2# \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module cpu_t $end
$scope module reg_file $end
$var reg 32 3# \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 3#
bx 2#
bx 1#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
b0 p"
bz o"
b0 n"
b0 m"
b0 l"
b0 k"
b100000 j"
bx i"
b0 h"
b0 g"
b0 f"
bx e"
bx d"
0c"
bx b"
bx a"
bx `"
bx _"
b0 ^"
bx ]"
b0 \"
b0 ["
bx Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
bz T"
bx S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
bx M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
bx @"
bx ?"
bx >"
bx ="
bx <"
b0 ;"
b0 :"
bx 9"
bx 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
bx *"
b0 )"
b0 ("
b0 '"
bx &"
b0 %"
b0 $"
bx #"
bx ""
b0 !"
bx ~
bx }
bx |
b0 {
b0 z
bx y
b0 x
b0 w
bx v
b0 u
b0 t
bx s
bx r
bx q
bx p
b0 o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
b0 Z
bx Y
b0 X
b0 W
bx V
b0 U
b0 T
bz S
b0 R
b0 Q
b0 P
b0 O
bx N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
0G
0F
xE
b0 D
b0 C
bx B
b0 A
b0 @
bx ?
bx >
b0 =
bx <
0;
0:
09
b0 8
b0 7
b0 6
b0 5
bx 4
b0 3
bx 2
bx 1
x0
x/
bx .
bx -
bx ,
bx +
b100000 *
1)
0(
b0 '
b0 &
bz %
bx $
b0 #
b0 "
b0 !
$end
#10
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 [
b0 p
b0 v
b0 \
b0 q
b0 s
b0 <
b0 &"
b0 i"
b100 ?
b100 ]"
b100 `"
b100 >
b100 S"
b100 _"
#20
b0 e
b0 d
b0 h
b100 B
b100 Z"
b100 b"
b1 1
b1 ""
b1 >"
b0 .
b0 ~
b0 ="
b0 -
b0 }
b0 <"
b0 ,
b0 |
b0 +
b0 y
b0 9"
#30
b0 Y
b0 r
b0 *"
b0 a"
b0 4
b0 @"
b0 d"
b0 2
b0 ?"
b0 e"
b0 f
b0 g
b0 ]
b0 a
b0 b
b0 n
10
1/
b0 V
b0 #"
b0 8"
0E
#40
b0 $
b0 N
b0 M"
b0 q"
b0 c
1(
b0 `
b0 _
b0 ^
#50
b0 i
b0 j
b0 l
b0 m
b0 k
#80
0(
0)
#120
1;
b1 8
b1 +"
b1 K"
1G
bz R
bz '"
bz V"
b100 =
b100 )"
b100 X"
b10100000000000010010011 $
b10100000000000010010011 N
b10100000000000010010011 M"
b10100000000000010010011 q"
1(
#130
b100 <
b100 &"
b100 i"
#140
b100 !
b100 @
b100 L"
b100 ["
b100 \"
b100 p"
#150
b1000 ?
b1000 ]"
b1000 `"
#160
b1000 B
b1000 Z"
b1000 b"
0(
#200
b101 ;"
b1 :"
b10011 !"
b101 g"
1:
b1 7
b1 7"
b1 R"
b100 C
b100 A"
b100 O"
b10100000000000010010011 O
b10100000000000010010011 N"
b1100000000000100010011 $
b1100000000000100010011 N
b1100000000000100010011 M"
b1100000000000100010011 q"
1(
#220
b1000 !
b1000 @
b1000 L"
b1000 ["
b1000 \"
b1000 p"
#230
b1100 ?
b1100 ]"
b1100 `"
1E
#240
b1100 B
b1100 Z"
b1100 b"
0(
#280
b11 ;"
b10 :"
b11 g"
b1000 C
b1000 A"
b1000 O"
b1100000000000100010011 O
b1100000000000100010011 N"
1F
b101 Q
b101 t
b101 w
b101 /"
b101 E"
b100 D
b100 ,"
b100 H"
b1 P
b1 0"
b1 D"
19
b1 6
b1 %"
b1 Y"
b1000010011 $
b1000010011 N
b1000010011 M"
b1000010011 q"
1(
#290
b101 [
b101 p
b101 v
b101 \
b101 q
b101 s
b0 <
b0 &"
b0 i"
#300
b1100 !
b1100 @
b1100 L"
b1100 ["
b1100 \"
b1100 p"
b10100000 h
#310
b1010 Y
b1010 r
b1010 *"
b1010 a"
b10000 ?
b10000 ]"
b10000 `"
b101 ]
b101 a
b1010 n
#320
b10000 B
b10000 Z"
b10000 b"
0(
#330
b1 l
b1 m
b11001 k
#360
b0 ;"
b100 :"
b0 g"
b101 &
b101 T
b101 3"
b101 l"
b100 A
b100 6"
b100 ^"
b1 M
b1 2"
b1 Q"
b1010 '
b1010 X
b1010 1"
b1010 P"
b1010 k"
b11 Q
b11 t
b11 w
b11 /"
b11 E"
b1000 D
b1000 ,"
b1000 H"
b10 P
b10 0"
b10 D"
b1100 C
b1100 A"
b1100 O"
b1000010011 O
b1000010011 N"
b1010010011 $
b1010010011 N
b1010010011 M"
b1010010011 q"
1(
#370
b11 [
b11 p
b11 v
b11 \
b11 q
b11 s
b1000 >
b1000 S"
b1000 _"
#380
b10000 !
b10000 @
b10000 L"
b10000 ["
b10000 \"
b10000 p"
b11000 h
#390
b110 Y
b110 r
b110 *"
b110 a"
b10100 ?
b10100 ]"
b10100 `"
b11 ]
b11 a
b110 n
#400
b10100 B
b10100 Z"
b10100 b"
0(
#410
b1001 k
#440
b101 :"
b10000 C
b10000 A"
b10000 O"
b1010010011 O
b1010010011 N"
b0 Q
b0 t
b0 w
b0 /"
b0 E"
b1100 D
b1100 ,"
b1100 H"
b100 P
b100 0"
b100 D"
b11 &
b11 T
b11 3"
b11 l"
b1000 A
b1000 6"
b1000 ^"
b10 M
b10 2"
b10 Q"
b110 '
b110 X
b110 1"
b110 P"
b110 k"
b1000 =
b1000 )"
b1000 X"
b1 L
b1 W"
b1 h"
b1010 W
b1010 ("
b1010 U"
b1100010011 $
b1100010011 N
b1100010011 M"
b1100010011 q"
1(
#450
b1010 <
b1010 &"
b1010 i"
b0 [
b0 p
b0 v
b0 \
b0 q
b0 s
b1100 >
b1100 S"
b1100 _"
#460
b10100 !
b10100 @
b10100 L"
b10100 ["
b10100 \"
b10100 p"
b0 h
#470
b0 Y
b0 r
b0 *"
b0 a"
b11000 ?
b11000 ]"
b11000 `"
b0 ]
b0 a
b0 n
#480
b11000 B
b11000 Z"
b11000 b"
0(
#490
b1010 s"
b0 l
b0 m
b0 k
#520
b110 :"
b1100 =
b1100 )"
b1100 X"
b10 L
b10 W"
b10 h"
b110 W
b110 ("
b110 U"
b0 &
b0 T
b0 3"
b0 l"
b1100 A
b1100 6"
b1100 ^"
b100 M
b100 2"
b100 Q"
b0 '
b0 X
b0 1"
b0 P"
b0 k"
b10000 D
b10000 ,"
b10000 H"
b101 P
b101 0"
b101 D"
b10100 C
b10100 A"
b10100 O"
b1100010011 O
b1100010011 N"
b1110010011 $
b1110010011 N
b1110010011 M"
b1110010011 q"
1(
#530
b110 <
b110 &"
b110 i"
b10000 >
b10000 S"
b10000 _"
#540
b11000 !
b11000 @
b11000 L"
b11000 ["
b11000 \"
b11000 p"
#550
b11100 ?
b11100 ]"
b11100 `"
#560
b11100 B
b11100 Z"
b11100 b"
0(
#570
b110 t"
#600
b111 :"
b11000 C
b11000 A"
b11000 O"
b1110010011 O
b1110010011 N"
b10100 D
b10100 ,"
b10100 H"
b110 P
b110 0"
b110 D"
b10000 A
b10000 6"
b10000 ^"
b101 M
b101 2"
b101 Q"
b10000 =
b10000 )"
b10000 X"
b100 L
b100 W"
b100 h"
b0 W
b0 ("
b0 U"
b1000001000000110110011 $
b1000001000000110110011 N
b1000001000000110110011 M"
b1000001000000110110011 q"
1(
#610
b0 <
b0 &"
b0 i"
b10100 >
b10100 S"
b10100 _"
#620
b11100 !
b11100 @
b11100 L"
b11100 ["
b11100 \"
b11100 p"
#630
b100000 ?
b100000 ]"
b100000 `"
#640
b100000 B
b100000 Z"
b100000 b"
0(
#650
b0 v"
#680
b10 ;"
b11 :"
b110011 !"
b10 g"
b1 f"
b10100 =
b10100 )"
b10100 X"
b101 L
b101 W"
b101 h"
b10100 A
b10100 6"
b10100 ^"
b110 M
b110 2"
b110 Q"
b11000 D
b11000 ,"
b11000 H"
b111 P
b111 0"
b111 D"
b11100 C
b11100 A"
b11100 O"
b1000001000000110110011 O
b1000001000000110110011 N"
bx $
bx N
bx M"
bx q"
1(
#690
b11000 >
b11000 S"
b11000 _"
#700
b100000 !
b100000 @
b100000 L"
b100000 ["
b100000 \"
b100000 p"
b110 2
b110 ?"
b110 e"
b1010 4
b1010 @"
b1010 d"
#710
b100100 ?
b100100 ]"
b100100 `"
0E
#720
b100100 B
b100100 Z"
b100100 b"
0(
#730
b0 w"
#760
b0xxxxxxxxxxxx ;"
bx :"
bx {
bx z
bx !"
bx g"
bx f"
b100000 C
b100000 A"
b100000 O"
bx O
bx N"
0F
b10 Q
b10 t
b10 w
b10 /"
b10 E"
b110 3
b110 x
b110 J"
b1010 5
b1010 u
b1010 I"
b11100 D
b11100 ,"
b11100 H"
b11 P
b11 0"
b11 D"
b11000 A
b11000 6"
b11000 ^"
b111 M
b111 2"
b111 Q"
b11000 =
b11000 )"
b11000 X"
b110 L
b110 W"
b110 h"
1(
#770
b110 [
b110 p
b110 v
b10 \
b10 q
b10 s
b11100 >
b11100 S"
b11100 _"
#780
b100100 !
b100100 @
b100100 L"
b100100 ["
b100100 \"
b100100 p"
b10000000 h
bx 2
bx ?"
bx e"
bx 4
bx @"
bx d"
#790
b1000 Y
b1000 r
b1000 *"
b1000 a"
b101000 ?
b101000 ]"
b101000 `"
b1 f
b1 g
b10 ]
b110 a
b100 b
b1000 n
bx V
bx #"
bx 8"
xE
#800
b101000 B
b101000 Z"
b101000 b"
b11111111111111111111111111111100 c
0(
#810
b0 x"
b10 i
b10 j
b1100 k
#840
b0 Y
b0 r
b0 *"
b0 a"
b11100 =
b11100 )"
b11100 X"
b111 L
b111 W"
b111 h"
b10 &
b10 T
b10 3"
b10 l"
b11100 A
b11100 6"
b11100 ^"
b11 M
b11 2"
b11 Q"
b1000 '
b1000 X
b1000 1"
b1000 P"
b1000 k"
xF
bx Z
bx o
bx B"
b0xxxxxxxxxxxx Q
b0xxxxxxxxxxxx t
b0xxxxxxxxxxxx w
b0xxxxxxxxxxxx /"
b0xxxxxxxxxxxx E"
bx 3
bx x
bx J"
bx 5
bx u
bx I"
b100000 D
b100000 ,"
b100000 H"
bx P
bx 0"
bx D"
b100100 C
b100100 A"
b100100 O"
1(
#850
b0xxxxxxxxxxxx \
b0xxxxxxxxxxxx q
b0xxxxxxxxxxxx s
bx [
bx p
bx v
b100000 >
b100000 S"
b100000 _"
#860
b101000 !
b101000 @
b101000 L"
b101000 ["
b101000 \"
b101000 p"
bx e
bx d
bx h
#870
b101100 ?
b101100 ]"
b101100 `"
b0x f
b0x g
b0xxxxxxxxxxxx ]
bx a
bx b
bx n
#880
b101100 B
b101100 Z"
b101100 b"
bx c
0(
#890
b0 y"
bx i
bx j
bx l
bx m
bx k
#920
b101000 C
b101000 A"
b101000 O"
b100100 D
b100100 ,"
b100100 H"
b0xxxxxxxxxxxx &
b0xxxxxxxxxxxx T
b0xxxxxxxxxxxx 3"
b0xxxxxxxxxxxx l"
b100000 A
b100000 6"
b100000 ^"
bx M
bx 2"
bx Q"
b0 '
b0 X
b0 1"
b0 P"
b0 k"
b100000 =
b100000 )"
b100000 X"
b11 L
b11 W"
b11 h"
b1000 W
b1000 ("
b1000 U"
1(
#930
b1000 <
b1000 &"
b1000 i"
b100100 >
b100100 S"
b100100 _"
#940
b101100 !
b101100 @
b101100 L"
b101100 ["
b101100 \"
b101100 p"
#950
b110000 ?
b110000 ]"
b110000 `"
#960
b110000 B
b110000 Z"
b110000 b"
0(
#970
b1000 u"
#1000
b100100 =
b100100 )"
b100100 X"
bx L
bx W"
bx h"
b0 W
b0 ("
b0 U"
b100100 A
b100100 6"
b100100 ^"
b101000 D
b101000 ,"
b101000 H"
b101100 C
b101100 A"
b101100 O"
1(
#1010
b0 <
b0 &"
b0 i"
b101000 >
b101000 S"
b101000 _"
#1020
b110000 !
b110000 @
b110000 L"
b110000 ["
b110000 \"
b110000 p"
#1030
b110100 ?
b110100 ]"
b110100 `"
#1040
b110100 B
b110100 Z"
b110100 b"
0(
#1080
b110000 C
b110000 A"
b110000 O"
b101100 D
b101100 ,"
b101100 H"
b101000 A
b101000 6"
b101000 ^"
b101000 =
b101000 )"
b101000 X"
1(
#1090
b101100 >
b101100 S"
b101100 _"
#1100
b110100 !
b110100 @
b110100 L"
b110100 ["
b110100 \"
b110100 p"
#1110
b111000 ?
b111000 ]"
b111000 `"
#1120
b111000 B
b111000 Z"
b111000 b"
0(
#1160
b101100 =
b101100 )"
b101100 X"
b101100 A
b101100 6"
b101100 ^"
b110000 D
b110000 ,"
b110000 H"
b110100 C
b110100 A"
b110100 O"
1(
