$date
	Fri May 16 08:30:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module ID_EX_reg_tb $end
$var wire 2 ! OUT_REG_WRITE_SEL [1:0] $end
$var wire 1 " OUT_REG_WRITE_ENABLE $end
$var wire 32 # OUT_READ_DATA2 [31:0] $end
$var wire 32 $ OUT_READ_DATA1 [31:0] $end
$var wire 32 % OUT_PC_PLUS_4 [31:0] $end
$var wire 1 & OUT_OP_SEL $end
$var wire 2 ' OUT_MEM_WRITE [1:0] $end
$var wire 2 ( OUT_MEM_READ [1:0] $end
$var wire 32 ) OUT_IMMEDIATE [31:0] $end
$var wire 5 * OUT_DEST_REG [4:0] $end
$var wire 2 + OUT_BRANCH_JUMP [1:0] $end
$var wire 5 , OUT_ALU_OP [4:0] $end
$var reg 5 - ALU_OP [4:0] $end
$var reg 2 . BRANCH_JUMP [1:0] $end
$var reg 1 / CLK $end
$var reg 5 0 DEST_REG [4:0] $end
$var reg 32 1 IMMEDIATE [31:0] $end
$var reg 2 2 MEM_READ [1:0] $end
$var reg 2 3 MEM_WRITE [1:0] $end
$var reg 1 4 OP_SEL $end
$var reg 32 5 PC_PLUS_4 [31:0] $end
$var reg 32 6 READ_DATA1 [31:0] $end
$var reg 32 7 READ_DATA2 [31:0] $end
$var reg 1 8 REG_WRITE_ENABLE $end
$var reg 2 9 REG_WRITE_SEL [1:0] $end
$var reg 1 : RESET $end
$scope module id_ex_reg_t $end
$var wire 5 ; ALU_OP [4:0] $end
$var wire 2 < BRANCH_JUMP [1:0] $end
$var wire 1 / CLK $end
$var wire 5 = DEST_REG [4:0] $end
$var wire 32 > IMMEDIATE [31:0] $end
$var wire 2 ? MEM_READ [1:0] $end
$var wire 2 @ MEM_WRITE [1:0] $end
$var wire 1 4 OP_SEL $end
$var wire 32 A PC_PLUS_4 [31:0] $end
$var wire 32 B READ_DATA1 [31:0] $end
$var wire 32 C READ_DATA2 [31:0] $end
$var wire 1 8 REG_WRITE_ENABLE $end
$var wire 2 D REG_WRITE_SEL [1:0] $end
$var wire 1 : RESET $end
$var reg 5 E OUT_ALU_OP [4:0] $end
$var reg 2 F OUT_BRANCH_JUMP [1:0] $end
$var reg 5 G OUT_DEST_REG [4:0] $end
$var reg 32 H OUT_IMMEDIATE [31:0] $end
$var reg 2 I OUT_MEM_READ [1:0] $end
$var reg 2 J OUT_MEM_WRITE [1:0] $end
$var reg 1 & OUT_OP_SEL $end
$var reg 32 K OUT_PC_PLUS_4 [31:0] $end
$var reg 32 L OUT_READ_DATA1 [31:0] $end
$var reg 32 M OUT_READ_DATA2 [31:0] $end
$var reg 1 " OUT_REG_WRITE_ENABLE $end
$var reg 2 N OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
1:
b0 9
08
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
1/
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
b0 #
0"
b0 !
$end
#40
0/
#80
1/
0:
#120
0/
#160
1"
b11 !
b11 N
b10 (
b10 I
b1 '
b1 J
b1 +
b1 F
b10 ,
b10 E
b1100100 )
b1100100 H
b1010100 #
b1010100 M
b101010 $
b101010 L
b1101000 %
b1101000 K
b1 *
b1 G
1/
18
b11 9
b11 D
b10 2
b10 ?
b1 3
b1 @
b1 .
b1 <
b10 -
b10 ;
b1100100 1
b1100100 >
b1010100 7
b1010100 C
b101010 6
b101010 B
b1101000 5
b1101000 A
b1 0
b1 =
#200
0/
#240
0"
b0 !
b0 N
b1 (
b1 I
b10 '
b10 J
1&
b0 +
b0 F
b11 ,
b11 E
b100101100 )
b100101100 H
b110010000 #
b110010000 M
b11001000 $
b11001000 L
b11001100 %
b11001100 K
b10 *
b10 G
1/
08
b0 9
b0 D
b1 2
b1 ?
b10 3
b10 @
14
b0 .
b0 <
b11 -
b11 ;
b100101100 1
b100101100 >
b110010000 7
b110010000 C
b11001000 6
b11001000 B
b11001100 5
b11001100 A
b10 0
b10 =
#280
0/
#320
1/
