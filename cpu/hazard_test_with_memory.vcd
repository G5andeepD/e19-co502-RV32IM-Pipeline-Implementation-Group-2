$date
	Fri Jul 11 20:01:11 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module hazard_test_with_memory $end
$var wire 32 ! instr_if [31:0] $end
$var wire 1 " stall_pipeline $end
$var wire 32 # rt_data_forwarded_id [31:0] $end
$var wire 32 $ rs_data_forwarded_id [31:0] $end
$var wire 5 % rs2_id [4:0] $end
$var wire 5 & rs1_id [4:0] $end
$var wire 32 ' pc_out [31:0] $end
$var wire 1 ( pc_enable $end
$var wire 2 ) mem_write_ma [1:0] $end
$var wire 2 * mem_read_ma [1:0] $end
$var wire 1 + if_id_enable $end
$var wire 1 , id_ex_enable $end
$var wire 2 - forward_rs2 [1:0] $end
$var wire 2 . forward_rs1 [1:0] $end
$var wire 1 / flush_if_id $end
$var wire 1 0 flush_id_ex $end
$var wire 32 1 dmem_data_out [31:0] $end
$var wire 32 2 dmem_data_in [31:0] $end
$var wire 32 3 alu_result_ma [31:0] $end
$var reg 1 4 clk $end
$var reg 1 5 reset $end
$var integer 32 6 i [31:0] $end
$scope function decode_instruction $end
$var reg 32 7 instr [31:0] $end
$upscope $end
$scope function get_forwarding_source $end
$var reg 2 8 forward_signal [1:0] $end
$upscope $end
$scope function get_instruction_name $end
$var reg 32 9 instr [31:0] $end
$upscope $end
$scope function get_phase_description $end
$var reg 32 : pc [31:0] $end
$upscope $end
$scope module cpu_inst $end
$var wire 1 4 clk $end
$var wire 1 0 flush_id_ex $end
$var wire 1 / flush_if_id $end
$var wire 2 ; forward_rs1 [1:0] $end
$var wire 2 < forward_rs2 [1:0] $end
$var wire 2 = forward_store_data_internal [1:0] $end
$var wire 1 , id_ex_enable $end
$var wire 1 + if_id_enable $end
$var wire 32 > instr_if [31:0] $end
$var wire 1 ? is_load_id $end
$var wire 1 ( pc_enable $end
$var wire 1 5 reset $end
$var wire 5 @ rs1_id [4:0] $end
$var wire 5 A rs2_id [4:0] $end
$var wire 32 B rs_data_forwarded_id [31:0] $end
$var wire 32 C rt_data_forwarded_id [31:0] $end
$var wire 1 " stall_pipeline $end
$var wire 32 D store_data_forwarded_internal [31:0] $end
$var wire 1 E zero $end
$var wire 1 F stall_pipeline_internal $end
$var wire 32 G rt_data_id [31:0] $end
$var wire 32 H rt_data_forwarded_id_internal [31:0] $end
$var wire 32 I rt_data_ex [31:0] $end
$var wire 32 J rs_data_id [31:0] $end
$var wire 32 K rs_data_forwarded_id_internal [31:0] $end
$var wire 32 L rs_data_ex [31:0] $end
$var wire 5 M rs2_id_internal [4:0] $end
$var wire 5 N rs1_id_internal [4:0] $end
$var wire 2 O reg_write_select_wb [1:0] $end
$var wire 2 P reg_write_select_ma [1:0] $end
$var wire 2 Q reg_write_select_id [1:0] $end
$var wire 2 R reg_write_select_ex [1:0] $end
$var wire 1 S reg_write_enable_wb $end
$var wire 1 T reg_write_enable_ma $end
$var wire 1 U reg_write_enable_id $end
$var wire 1 V reg_write_enable_ex $end
$var wire 32 W reg_write_data_wb [31:0] $end
$var wire 1 X pc_sel_ma $end
$var wire 1 Y pc_sel_ex $end
$var wire 32 Z pc_plus_offset_ma [31:0] $end
$var wire 32 [ pc_plus_4_wb [31:0] $end
$var wire 32 \ pc_plus_4_ma [31:0] $end
$var wire 32 ] pc_plus_4_if [31:0] $end
$var wire 32 ^ pc_out [31:0] $end
$var wire 32 _ pc_ma [31:0] $end
$var wire 32 ` pc_initial_if [31:0] $end
$var wire 32 a pc_id [31:0] $end
$var wire 32 b pc_ex [31:0] $end
$var wire 1 c pc_enable_internal $end
$var wire 1 d op_sel_id $end
$var wire 1 e op_sel_ex $end
$var wire 2 f mem_write_ma [1:0] $end
$var wire 2 g mem_write_id [1:0] $end
$var wire 2 h mem_write_ex [1:0] $end
$var wire 2 i mem_read_ma [1:0] $end
$var wire 2 j mem_read_id [1:0] $end
$var wire 2 k mem_read_ex [1:0] $end
$var wire 1 l is_load_ex $end
$var wire 5 m instr_wb [4:0] $end
$var wire 5 n instr_ma [4:0] $end
$var wire 32 o instr_id [31:0] $end
$var wire 5 p instr_ex [4:0] $end
$var wire 3 q imm_sel_id [2:0] $end
$var wire 32 r imm_id [31:0] $end
$var wire 32 s imm_ex [31:0] $end
$var wire 1 t if_id_enable_internal $end
$var wire 1 u id_ex_enable_internal $end
$var wire 2 v forward_rs2_internal [1:0] $end
$var wire 2 w forward_rs1_internal [1:0] $end
$var wire 1 x flush_if_id_internal $end
$var wire 1 y flush_id_ex_internal $end
$var wire 32 z dmem_out_wb [31:0] $end
$var wire 32 { dmem_data_out [31:0] $end
$var wire 32 | dmem_data_in [31:0] $end
$var wire 2 } branch_jump_id [1:0] $end
$var wire 2 ~ branch_jump_ex [1:0] $end
$var wire 5 !" aluop_id [4:0] $end
$var wire 32 "" alu_result_wb [31:0] $end
$var wire 32 #" alu_result_ma [31:0] $end
$var wire 32 $" alu_result_ex [31:0] $end
$var wire 5 %" alu_op_ex [4:0] $end
$var wire 32 &" alu_input2_ex [31:0] $end
$scope module alu $end
$var wire 32 '" andData [31:0] $end
$var wire 32 (" mulhData [31:0] $end
$var wire 32 )" mulhsuData [31:0] $end
$var wire 32 *" mulhuData [31:0] $end
$var wire 32 +" orData [31:0] $end
$var wire 32 ," xorData [31:0] $end
$var wire 32 -" subData [31:0] $end
$var wire 32 ." srlData [31:0] $end
$var wire 32 /" sraData [31:0] $end
$var wire 32 0" sltuData [31:0] $end
$var wire 32 1" sltData [31:0] $end
$var wire 32 2" sllData [31:0] $end
$var wire 32 3" remuData [31:0] $end
$var wire 32 4" remData [31:0] $end
$var wire 32 5" mulData [31:0] $end
$var wire 32 6" divuData [31:0] $end
$var wire 32 7" divData [31:0] $end
$var wire 32 8" addData [31:0] $end
$var wire 5 9" SELECT [4:0] $end
$var wire 32 :" DATA2 [31:0] $end
$var wire 32 ;" DATA1 [31:0] $end
$var reg 32 <" RESULT [31:0] $end
$var reg 1 E ZERO $end
$upscope $end
$scope module alu_input2_mux $end
$var wire 1 e sel $end
$var wire 32 =" out [31:0] $end
$var wire 32 >" in1 [31:0] $end
$var wire 32 ?" in0 [31:0] $end
$upscope $end
$scope module branch_selector $end
$var wire 1 E ZERO $end
$var wire 2 @" BRANCH_SEL [1:0] $end
$var reg 1 Y PC_SEL $end
$upscope $end
$scope module control_unit $end
$var wire 3 A" funct3 [2:0] $end
$var wire 7 B" funct7 [6:0] $end
$var wire 1 ? is_load $end
$var wire 7 C" opcode [6:0] $end
$var wire 2 D" write_back_sel [1:0] $end
$var wire 1 d use_imm $end
$var wire 1 U reg_write_en $end
$var wire 2 E" mem_write [1:0] $end
$var wire 2 F" mem_read [1:0] $end
$var wire 3 G" imm_sel [2:0] $end
$var wire 2 H" branch_sel [1:0] $end
$var wire 5 I" alu_op [4:0] $end
$upscope $end
$scope module data_mux $end
$var wire 32 J" in3 [31:0] $end
$var wire 2 K" sel [1:0] $end
$var wire 32 L" out [31:0] $end
$var wire 32 M" in2 [31:0] $end
$var wire 32 N" in1 [31:0] $end
$var wire 32 O" in0 [31:0] $end
$upscope $end
$scope module ex_ma_reg $end
$var wire 32 P" ALU_RESULT [31:0] $end
$var wire 1 4 CLK $end
$var wire 32 Q" IMMEDIATE [31:0] $end
$var wire 1 Y PC_SEL $end
$var wire 1 5 RESET $end
$var wire 2 R" REG_WRITE_SEL [1:0] $end
$var wire 1 V REG_WRITE_ENABLE $end
$var wire 32 S" PC_PLUS_4 [31:0] $end
$var wire 2 T" MEM_WRITE [1:0] $end
$var wire 2 U" MEM_READ [1:0] $end
$var wire 5 V" DEST_REG [4:0] $end
$var reg 32 W" OUT_ALU_RESULT [31:0] $end
$var reg 5 X" OUT_DEST_REG [4:0] $end
$var reg 32 Y" OUT_IMMEDIATE [31:0] $end
$var reg 2 Z" OUT_MEM_READ [1:0] $end
$var reg 2 [" OUT_MEM_WRITE [1:0] $end
$var reg 32 \" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 X OUT_PC_SEL $end
$var reg 1 T OUT_REG_WRITE_ENABLE $end
$var reg 2 ]" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module forwarding_unit $end
$var wire 32 ^" alu_result_ex [31:0] $end
$var wire 32 _" alu_result_ma [31:0] $end
$var wire 5 `" rd_ma [4:0] $end
$var wire 32 a" reg_write_data_wb [31:0] $end
$var wire 1 T reg_write_enable_ma $end
$var wire 32 b" store_data_wb [31:0] $end
$var wire 32 c" store_data_ma [31:0] $end
$var wire 32 d" store_data_ex [31:0] $end
$var wire 5 e" rt_addr_ex [4:0] $end
$var wire 32 f" rs2_data_id [31:0] $end
$var wire 32 g" rs1_data_id [31:0] $end
$var wire 1 S reg_write_enable_wb $end
$var wire 1 V reg_write_enable_ex $end
$var wire 5 h" rd_wb [4:0] $end
$var wire 5 i" rd_ex [4:0] $end
$var wire 2 j" forward_rs2 [1:0] $end
$var wire 2 k" forward_rs1 [1:0] $end
$var reg 2 l" forward_store_data [1:0] $end
$var reg 32 m" rs1_data_forwarded [31:0] $end
$var reg 32 n" rs2_data_forwarded [31:0] $end
$var reg 32 o" store_data_forwarded [31:0] $end
$upscope $end
$scope module hazard_control_unit $end
$var wire 1 Y pc_sel_ex $end
$var wire 1 F stall_pipeline $end
$var wire 2 p" branch_jump_ex [1:0] $end
$var reg 1 y flush_id_ex $end
$var reg 1 x flush_if_id $end
$var reg 1 u id_ex_enable $end
$var reg 1 t if_id_enable $end
$var reg 1 c pc_enable $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 5 q" rd_ma [4:0] $end
$var wire 1 T reg_write_enable_ma $end
$var wire 5 r" rs1_id [4:0] $end
$var wire 5 s" rs2_id [4:0] $end
$var wire 1 S reg_write_enable_wb $end
$var wire 1 V reg_write_enable_ex $end
$var wire 5 t" rd_wb [4:0] $end
$var wire 5 u" rd_ex [4:0] $end
$var wire 1 l is_load_ex $end
$var reg 2 v" forward_rs1 [1:0] $end
$var reg 2 w" forward_rs2 [1:0] $end
$var reg 2 x" forward_store_data [1:0] $end
$var reg 1 F stall_pipeline $end
$scope function check_hazard $end
$upscope $end
$upscope $end
$scope module id_ex_reg $end
$var wire 5 y" ALU_OP [4:0] $end
$var wire 2 z" BRANCH_JUMP [1:0] $end
$var wire 1 4 CLK $end
$var wire 5 {" DEST_REG [4:0] $end
$var wire 1 u ENABLE $end
$var wire 1 y FLUSH $end
$var wire 1 ? IS_LOAD $end
$var wire 2 |" MEM_READ [1:0] $end
$var wire 2 }" MEM_WRITE [1:0] $end
$var wire 1 d OP_SEL $end
$var wire 32 ~" READ_DATA1 [31:0] $end
$var wire 32 !# READ_DATA2 [31:0] $end
$var wire 1 U REG_WRITE_ENABLE $end
$var wire 2 "# REG_WRITE_SEL [1:0] $end
$var wire 1 5 RESET $end
$var wire 32 ## PC_PLUS_4 [31:0] $end
$var wire 32 $# IMMEDIATE [31:0] $end
$var reg 5 %# OUT_ALU_OP [4:0] $end
$var reg 2 &# OUT_BRANCH_JUMP [1:0] $end
$var reg 5 '# OUT_DEST_REG [4:0] $end
$var reg 32 (# OUT_IMMEDIATE [31:0] $end
$var reg 1 l OUT_IS_LOAD $end
$var reg 2 )# OUT_MEM_READ [1:0] $end
$var reg 2 *# OUT_MEM_WRITE [1:0] $end
$var reg 1 e OUT_OP_SEL $end
$var reg 32 +# OUT_PC_PLUS_4 [31:0] $end
$var reg 32 ,# OUT_READ_DATA1 [31:0] $end
$var reg 32 -# OUT_READ_DATA2 [31:0] $end
$var reg 1 V OUT_REG_WRITE_ENABLE $end
$var reg 2 .# OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module if_id_reg $end
$var wire 1 4 CLK $end
$var wire 1 t ENABLE $end
$var wire 1 x FLUSH $end
$var wire 32 /# INSTRUCTION [31:0] $end
$var wire 1 5 RESET $end
$var wire 32 0# PC_PLUS_4 [31:0] $end
$var reg 32 1# OUT_INSTRUCTION [31:0] $end
$var reg 32 2# OUT_PC_PLUS_4 [31:0] $end
$upscope $end
$scope module ma_wb_reg $end
$var wire 32 3# ALU_RESULT [31:0] $end
$var wire 1 4 CLK $end
$var wire 5 4# DEST_REG [4:0] $end
$var wire 1 T REG_WRITE_ENABLE $end
$var wire 2 5# REG_WRITE_SEL [1:0] $end
$var wire 1 5 RESET $end
$var wire 32 6# PC_PLUS_4 [31:0] $end
$var wire 32 7# DATA_OUT [31:0] $end
$var reg 32 8# OUT_ALU_RESULT [31:0] $end
$var reg 32 9# OUT_DATA_OUT [31:0] $end
$var reg 5 :# OUT_DEST_REG [4:0] $end
$var reg 32 ;# OUT_PC_PLUS_4 [31:0] $end
$var reg 1 S OUT_REG_WRITE_ENABLE $end
$var reg 2 <# OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module pc $end
$var wire 1 4 clk $end
$var wire 1 c enable $end
$var wire 1 5 reset $end
$var wire 32 =# pc_in [31:0] $end
$var reg 32 ># pc_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 ?# pc_in [31:0] $end
$var wire 32 @# pc_out [31:0] $end
$upscope $end
$scope module pc_adder_ma $end
$var wire 32 A# pc_in [31:0] $end
$var wire 32 B# pc_out [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 C# in0 [31:0] $end
$var wire 1 X sel $end
$var wire 32 D# out [31:0] $end
$var wire 32 E# in1 [31:0] $end
$upscope $end
$scope module pc_offset_adder $end
$var wire 32 F# a [31:0] $end
$var wire 32 G# b [31:0] $end
$var wire 32 H# sum [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 4 CLK $end
$var wire 32 I# DATA_OUT1 [31:0] $end
$var wire 32 J# DATA_OUT2 [31:0] $end
$var wire 5 K# OUT_ADDR1 [4:0] $end
$var wire 5 L# OUT_ADDR2 [4:0] $end
$var wire 1 5 RESET $end
$var wire 5 M# WRITE_ADDR [4:0] $end
$var wire 32 N# WRITE_DATA [31:0] $end
$var wire 1 S WRITE_ENABLE $end
$var integer 32 O# i [31:0] $end
$upscope $end
$scope module sign_extender $end
$var wire 3 P# imm_sel [2:0] $end
$var wire 25 Q# instr_25 [24:0] $end
$var wire 32 R# imm_u [31:0] $end
$var wire 12 S# imm_s [11:0] $end
$var wire 21 T# imm_j [20:0] $end
$var wire 12 U# imm_i [11:0] $end
$var wire 13 V# imm_b [12:0] $end
$var reg 32 W# imm_out [31:0] $end
$upscope $end
$scope module store_data_mux $end
$var wire 32 X# in0 [31:0] $end
$var wire 32 Y# in1 [31:0] $end
$var wire 32 Z# in2 [31:0] $end
$var wire 32 [# in3 [31:0] $end
$var wire 32 \# out [31:0] $end
$var wire 2 ]# sel [1:0] $end
$upscope $end
$upscope $end
$scope module dmem_t $end
$var wire 32 ^# address [31:0] $end
$var wire 1 4 clk $end
$var wire 32 _# data_in [31:0] $end
$var wire 2 `# mem_read [1:0] $end
$var wire 2 a# mem_write [1:0] $end
$var wire 1 5 reset $end
$var reg 32 b# data_out [31:0] $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 c# \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 d# \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 e# \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 f# \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 g# \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 h# \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 i# \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 j# \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 k# \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 l# \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 m# \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 n# \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 o# \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 p# \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 q# \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 r# \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 s# \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 t# \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 u# \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 v# \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 w# \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 x# \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 y# \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 z# \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 {# \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 |# \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 }# \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 ~# \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 !$ \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 "$ \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 #$ \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 $$ \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx $$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
bx \#
bx [#
b0 Z#
bx Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
bx P#
b100000 O#
bx N#
b0 M#
b0 L#
b0 K#
bx J#
bx I#
b100 H#
b0 G#
b0 F#
b100 E#
bx D#
bx C#
bx B#
b0 A#
bx @#
b0 ?#
b0 >#
bx =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
bx 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b100000000000010010011 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
bx "#
bx !#
bx ~"
bx }"
bx |"
b0 {"
bx z"
bx y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
bx o"
bx n"
bx m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
bx g"
bx f"
b0 e"
b0 d"
b0 c"
b0 b"
bx a"
b0 `"
b0 _"
bx ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
bx Q"
bx P"
b0 O"
b0 N"
b0 M"
bx L"
b0 K"
b0 J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
bx ="
bx <"
b0 ;"
bx :"
b0 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
b0 %"
bx $"
b0 #"
b0 ""
bx !"
b0 ~
bx }
b0 |
b0 {
b0 z
0y
0x
b0 w
b0 v
1u
1t
b0 s
b0 r
bx q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
bx j
b0 i
b0 h
bx g
b0 f
0e
xd
1c
b0 b
b0 a
bx `
b0 _
b0 ^
bx ]
bx \
b0 [
b100 Z
0Y
0X
bx W
0V
xU
0T
0S
b0 R
bx Q
b0 P
b0 O
b0 N
b0 M
b0 L
bx K
bx J
b0 I
bx H
bx G
0F
0E
bx D
bx C
bx B
b0 A
b0 @
0?
b100000000000010010011 >
b0 =
b0 <
b0 ;
bx :
bx 9
bx 8
bx 7
b100000 6
15
04
b0 3
b0 2
b0 1
00
0/
b0 .
b0 -
1,
1+
b0 *
b0 )
1(
b0 '
b0 &
b0 %
bx $
bx #
0"
b100000000000010010011 !
$end
#1000
b0 $$
b0 #$
b0 "$
b0 !$
b0 ~#
b0 }#
b0 |#
b0 {#
b0 z#
b0 y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 &"
b0 :"
b0 ="
b0 W
b0 L"
b0 a"
b0 N#
b0 [#
b100 ]
b100 @#
b100 C#
b100 \
b100 6#
b100 B#
#2000
b0 /"
b0 ."
b0 2"
b100 `
b100 =#
b100 D#
b0 '"
b0 q
b0 G"
b0 P#
b0 g
b0 E"
b0 }"
b0 j
b0 F"
b0 |"
b1 Q
b1 D"
b1 "#
b0 }
b0 H"
b0 z"
#3000
b0 #
b0 C
b0 H
b0 n"
b0 !#
b0 $
b0 B
b0 K
b0 m"
b0 ~"
1E
b0 $"
b0 <"
b0 P"
b0 ^"
b0 Y#
b0 J
b0 g"
b0 I#
b0 G
b0 f"
b0 J#
b0 0"
b0 1"
b0 +"
b0 ,"
b0 8"
1U
0d
b0 !"
b0 I"
b0 y"
#4000
b0 -"
b0 *"
b0 )"
b0 ("
#5000
b0 3"
b0 4"
b0 6"
b0 7"
b0 5"
14
#10000
b100000 O#
04
#11000
b0 $$
b0 #$
b0 "$
b0 !$
b0 ~#
b0 }#
b0 |#
b0 {#
b0 z#
b0 y#
b0 x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
b0 m#
b0 l#
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
#15000
14
#20000
04
05
#25000
b1 r
b1 $#
b1 W#
b1 U#
b1 S#
b100000000000 V#
b100000000000000000000 R#
b100000000000 T#
b1 {"
b10000000000001 Q#
b10011 C"
b1 %
b1 A
b1 M
b1 s"
b1 L#
b100 [
b100 M"
b100 ;#
bx Z
bx E#
bx H#
bx 2
bx |
bx Y"
bx G#
bx _#
1V
b1 R
b1 R"
b1 .#
b100000000000010010011 o
b100000000000010010011 1#
b100000000000010010011 7
b100000000000010010011 9
14
#27000
b100000000000100010011 !
b100000000000100010011 >
b100000000000100010011 /#
b100 '
b100 ^
b100 0#
b100 >#
b100 ?#
#28000
b1000 ]
b1000 @#
b1000 C#
1d
#29000
b1000 `
b1000 =#
b1000 D#
#30000
04
#35000
b10 S#
b10 V#
b10 {"
b10000000000010 Q#
b1 l"
b1 =
b1 ]#
b1 x"
b1 -
b1 <
b1 v
b1 j"
b1 w"
b100 a
b100 ##
b100 2#
b100000000000100010011 o
b100000000000100010011 1#
1e
b1 s
b1 >"
b1 (#
b1 p
b1 V"
b1 e"
b1 i"
b1 u"
b1 '#
1T
b1 P
b1 ]"
b1 5#
b0 8
b100000000000100010011 7
b100000000000100010011 9
14
#36000
b1 &"
b1 :"
b1 ="
#37000
b1000001000011001100011 !
b1000001000011001100011 >
b1000001000011001100011 /#
b1000 '
b1000 ^
b1000 0#
b1000 >#
b1000 ?#
#38000
b1 #
b1 C
b1 H
b1 n"
b1 !#
0E
b1 $"
b1 <"
b1 P"
b1 ^"
b1 Y#
b1100 ]
b1100 @#
b1100 C#
b1 0"
b1 1"
b1 +"
b1 ,"
b1 8"
#39000
b1100 `
b1100 =#
b1100 D#
b11111111111111111111111111111111 -"
#40000
04
#45000
b10 r
b10 $#
b10 W#
b10 U#
b1100 S#
b1100 V#
b1000001000000000000000 R#
b1000000000000010 T#
b1 $
b1 B
b1 K
b1 m"
b1 ~"
b10 .
b10 ;
b10 w
b10 k"
b10 v"
b1100 {"
b100000100001100 Q#
b1100011 C"
b10 %
b10 A
b10 M
b10 s"
b10 L#
b1 &
b1 @
b1 N
b1 r"
b1 K#
1S
b1 O
b1 K"
b1 <#
b1 n
b1 X"
b1 `"
b1 q"
b1 4#
b1 3
b1 #"
b1 W"
b1 _"
b1 3#
b1 Z#
b1 ^#
b1 I
b1 ?"
b1 b"
b1 c"
b1 d"
b1 -#
b1 X#
b100 b
b100 S"
b100 +#
b10 p
b10 V"
b10 e"
b10 i"
b10 u"
b10 '#
b1000 a
b1000 ##
b1000 2#
b1000001000011001100011 o
b1000001000011001100011 1#
b1 8
b1000001000011001100011 7
b1000001000011001100011 9
14
#47000
b110001100000000000110010011 !
b110001100000000000110010011 >
b110001100000000000110010011 /#
b1100 '
b1100 ^
b1100 0#
b1100 >#
b1100 ?#
b1100 r
b1100 $#
b1100 W#
b10 q
b10 G"
b10 P#
b1 }
b1 H"
b1 z"
#48000
b10000 ]
b10000 @#
b10000 C#
0d
b10000 !"
b10000 I"
b10000 y"
0U
#49000
b10000 `
b10000 =#
b10000 D#
#50000
04
#55000
b100001100010 r
b100001100010 $#
b100001100010 W#
b0 #
b0 C
b0 H
b0 n"
b0 !#
b1100011 U#
b1100011 S#
b100001100010 V#
b110001100000000000000000000 R#
b100001100010 T#
b0 $
b0 B
b0 K
b0 m"
b0 ~"
b11 {"
b11000110000000000011 Q#
b11 B"
b10011 C"
b11 %
b11 A
b11 M
b11 s"
b11 L#
b0 &
b0 @
b0 N
b0 r"
b0 K#
b11111111111111111111111111111111 $"
b11111111111111111111111111111111 <"
b11111111111111111111111111111111 P"
b11111111111111111111111111111111 ^"
b11111111111111111111111111111111 Y#
b0 l"
b0 =
b0 ]#
b0 x"
b0 -
b0 <
b0 v
b0 j"
b0 w"
b0 .
b0 ;
b0 w
b0 k"
b0 v"
b1100 a
b1100 ##
b1100 2#
b110001100000000000110010011 o
b110001100000000000110010011 1#
0V
0e
b1 ~
b1 @"
b1 p"
b1 &#
b10000 %"
b10000 9"
b10000 %#
b1100 s
b1100 >"
b1100 (#
b1 L
b1 ;"
b1 ,#
b1000 b
b1000 S"
b1000 +#
b1100 p
b1100 V"
b1100 e"
b1100 i"
b1100 u"
b1100 '#
b100 _
b100 \"
b100 A#
b100 F#
b10 n
b10 X"
b10 `"
b10 q"
b10 4#
b1 m
b1 h"
b1 t"
b1 :#
b1 M#
b1 ""
b1 N"
b1 8#
b1 8
b110001100000000000110010011 7
b110001100000000000110010011 9
14
#56000
b1 W
b1 L"
b1 a"
b1 N#
b1 [#
b10 2"
b1000 \
b1000 6#
b1000 B#
#57000
b101100000000000001010010011 !
b101100000000000001010010011 >
b101100000000000001010010011 /#
b10000 '
b10000 ^
b10000 0#
b10000 >#
b10000 ?#
b1100011 r
b1100011 $#
b1100011 W#
b0 q
b0 G"
b0 P#
b0 }
b0 H"
b0 z"
b0 0"
b0 1"
b1 '"
b0 ,"
b10 8"
#58000
10
1y
1/
1x
1Y
1E
b0 $"
b0 <"
b0 P"
b0 ^"
b0 Y#
b10100 ]
b10100 @#
b10100 C#
1d
b0 !"
b0 I"
b0 y"
1U
b0 -"
#59000
b10100 `
b10100 =#
b10100 D#
b1 6"
b1 7"
b1 5"
#60000
04
#61000
b1 d#
#65000
b0 r
b0 $#
b0 W#
b0 U#
b0 S#
b0 V#
b0 R#
b0 T#
0Y
00
0y
0/
0x
0E
b10 $"
b10 <"
b10 P"
b10 ^"
b10 Y#
b0 {"
b0 Q#
b0 B"
b0 C"
b0 %
b0 A
b0 M
b0 s"
b0 L#
b1000 [
b1000 M"
b1000 ;#
b10 m
b10 h"
b10 t"
b10 :#
b10 M#
1X
0T
b1000 _
b1000 \"
b1000 A#
b1000 F#
b1100 n
b1100 X"
b1100 `"
b1100 q"
b1100 4#
b0 3
b0 #"
b0 W"
b0 _"
b0 3#
b0 Z#
b0 ^#
b0 R
b0 R"
b0 .#
b0 ~
b0 @"
b0 p"
b0 &#
b0 %"
b0 9"
b0 %#
b0 s
b0 >"
b0 (#
b0 I
b0 ?"
b0 b"
b0 c"
b0 d"
b0 -#
b0 X#
b0 L
b0 ;"
b0 ,#
b1100 b
b1100 S"
b1100 +#
b0 p
b0 V"
b0 e"
b0 i"
b0 u"
b0 '#
b10000 a
b10000 ##
b10000 2#
b0 o
b0 1#
b0 8
b101100000000000001010010011 7
b101100000000000001010010011 9
14
#66000
bx `
bx =#
bx D#
b0 &"
b0 :"
b0 ="
b1100 \
b1100 6#
b1100 B#
b0 2"
#67000
bx !
bx >
bx /#
bx '
bx ^
bx 0#
bx >#
bx ?#
b0 '"
#68000
1E
b0 $"
b0 <"
b0 P"
b0 ^"
b0 Y#
bx ]
bx @#
bx C#
b0 +"
b0 8"
0d
#69000
b0 6"
b0 7"
b0 5"
#70000
04
#71000
b1 e#
#75000
bx r
bx $#
bx W#
bx U#
bx S#
bx0 V#
bx000000000000 R#
bx0 T#
x?
bx {"
bx Q#
bx B"
bx A"
bx C"
bx %
bx A
bx M
bx s"
bx L#
bx &
bx @
bx N
bx r"
bx K#
bx a
bx ##
bx 2#
bx o
bx 1#
1V
b1 R
b1 R"
b1 .#
b10000 b
b10000 S"
b10000 +#
0X
b0 P
b0 ]"
b0 5#
b1100 _
b1100 \"
b1100 A#
b1100 F#
b0 n
b0 X"
b0 `"
b0 q"
b0 4#
0S
b1100 [
b1100 M"
b1100 ;#
b1100 m
b1100 h"
b1100 t"
b1100 :#
b1100 M#
b0 ""
b0 N"
b0 8#
14
#76000
b0 W
b0 L"
b0 a"
b0 N#
b0 [#
b10000 \
b10000 6#
b10000 B#
#77000
b0 r
b0 $#
b0 W#
bx #
bx C
bx H
bx n"
bx !#
bx $
bx B
bx K
bx m"
bx ~"
bx q
bx G"
bx P#
b0x g
b0x E"
b0x }"
b0x j
b0x F"
b0x |"
bx Q
bx D"
bx "#
bx }
bx H"
bx z"
bx G
bx f"
bx J#
bx J
bx g"
bx I#
#78000
xU
xd
bx !"
bx I"
bx y"
#80000
04
#85000
b0 O
b0 K"
b0 <#
b10000 [
b10000 M"
b10000 ;#
b0 m
b0 h"
b0 t"
b0 :#
b0 M#
1T
b1 P
b1 ]"
b1 5#
b10000 _
b10000 \"
b10000 A#
b10000 F#
xl
xV
bx R
bx R"
bx .#
b0x k
b0x U"
b0x )#
b0x h
b0x T"
b0x *#
xe
bx ~
bx @"
bx p"
bx &#
bx %"
bx 9"
bx %#
bx I
bx ?"
bx b"
bx c"
bx d"
bx -#
bx X#
bx L
bx ;"
bx ,#
bx b
bx S"
bx +#
bx p
bx V"
bx e"
bx i"
bx u"
bx '#
14
#86000
bx &"
bx :"
bx ="
b10100 \
b10100 6#
b10100 B#
bx /"
bx ."
bx 2"
#87000
b0x 0"
b0x 1"
bx +"
bx ,"
bx 8"
#88000
bx '"
bx -"
#89000
bx 5"
#90000
bx 3"
bx 4"
bx 6"
bx 7"
04
#95000
xT
bx P
bx ]"
bx 5#
b0x *
b0x i
b0x Z"
b0x `#
b0x )
b0x f
b0x ["
b0x a#
bx _
bx \"
bx A#
bx F#
bx n
bx X"
bx `"
bx q"
bx 4#
1S
b1 O
b1 K"
b1 <#
b10100 [
b10100 M"
b10100 ;#
14
#96000
bx \
bx 6#
bx B#
#100000
04
#105000
xS
bx O
bx K"
bx <#
bx [
bx M"
bx ;#
bx m
bx h"
bx t"
bx :#
bx M#
14
#106000
bx W
bx L"
bx a"
bx N#
bx [#
#110000
04
#115000
14
#120000
04
#125000
14
#130000
04
#135000
14
#140000
04
#145000
14
#150000
04
#155000
14
#160000
04
#165000
14
#170000
04
#175000
14
#180000
04
#185000
14
#190000
04
#195000
14
#200000
04
#205000
14
#210000
04
#215000
14
#220000
04
#225000
14
#230000
04
#235000
14
#240000
04
#245000
14
#250000
04
#255000
14
#260000
04
#265000
14
#270000
04
#275000
14
#280000
04
#285000
14
#290000
04
#295000
14
#300000
04
