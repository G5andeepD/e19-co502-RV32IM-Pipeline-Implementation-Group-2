$date
	Fri Jul 04 05:59:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module hazard_test_with_memory $end
$var wire 32 ! dmem_data_out [31:0] $end
$var wire 32 " instr_if [31:0] $end
$var wire 1 # stall_pipeline $end
$var wire 32 $ rt_data_forwarded_id [31:0] $end
$var wire 32 % rs_data_forwarded_id [31:0] $end
$var wire 5 & rs2_id [4:0] $end
$var wire 5 ' rs1_id [4:0] $end
$var wire 32 ( pc_out [31:0] $end
$var wire 1 ) pc_enable $end
$var wire 2 * mem_write_ma [1:0] $end
$var wire 2 + mem_read_ma [1:0] $end
$var wire 1 , if_id_enable $end
$var wire 1 - id_ex_enable $end
$var wire 2 . forward_rs2 [1:0] $end
$var wire 2 / forward_rs1 [1:0] $end
$var wire 1 0 flush_if_id $end
$var wire 1 1 flush_id_ex $end
$var wire 32 2 dmem_data_in [31:0] $end
$var wire 32 3 alu_result_ma [31:0] $end
$var reg 1 4 clk $end
$var reg 1 5 reset $end
$var integer 32 6 i [31:0] $end
$scope function decode_instruction $end
$var reg 32 7 instr [31:0] $end
$upscope $end
$scope function get_forwarding_source $end
$var reg 2 8 forward_signal [1:0] $end
$upscope $end
$scope function get_instruction_name $end
$var reg 32 9 instr [31:0] $end
$upscope $end
$scope function get_phase_description $end
$var reg 32 : pc [31:0] $end
$upscope $end
$scope module cpu_inst $end
$var wire 1 4 clk $end
$var wire 32 ; dmem_data_out [31:0] $end
$var wire 1 1 flush_id_ex $end
$var wire 1 0 flush_if_id $end
$var wire 2 < forward_rs1 [1:0] $end
$var wire 2 = forward_rs2 [1:0] $end
$var wire 1 - id_ex_enable $end
$var wire 1 , if_id_enable $end
$var wire 32 > instr_if [31:0] $end
$var wire 1 ? is_load_id $end
$var wire 1 ) pc_enable $end
$var wire 1 5 reset $end
$var wire 5 @ rs1_id [4:0] $end
$var wire 5 A rs2_id [4:0] $end
$var wire 32 B rs_data_forwarded_id [31:0] $end
$var wire 32 C rt_data_forwarded_id [31:0] $end
$var wire 1 # stall_pipeline $end
$var wire 1 D zero $end
$var wire 1 E stall_pipeline_internal $end
$var wire 32 F rt_data_id [31:0] $end
$var wire 32 G rt_data_forwarded_id_internal [31:0] $end
$var wire 32 H rt_data_ex [31:0] $end
$var wire 32 I rs_data_id [31:0] $end
$var wire 32 J rs_data_forwarded_id_internal [31:0] $end
$var wire 32 K rs_data_ex [31:0] $end
$var wire 5 L rs2_id_internal [4:0] $end
$var wire 5 M rs1_id_internal [4:0] $end
$var wire 2 N reg_write_select_wb [1:0] $end
$var wire 2 O reg_write_select_ma [1:0] $end
$var wire 2 P reg_write_select_id [1:0] $end
$var wire 2 Q reg_write_select_ex [1:0] $end
$var wire 1 R reg_write_enable_wb $end
$var wire 1 S reg_write_enable_ma $end
$var wire 1 T reg_write_enable_id $end
$var wire 1 U reg_write_enable_ex $end
$var wire 32 V reg_write_data_wb [31:0] $end
$var wire 1 W pc_sel_ma $end
$var wire 1 X pc_sel_ex $end
$var wire 32 Y pc_plus_offset_ma [31:0] $end
$var wire 32 Z pc_plus_4_wb [31:0] $end
$var wire 32 [ pc_plus_4_ma [31:0] $end
$var wire 32 \ pc_plus_4_if [31:0] $end
$var wire 32 ] pc_out [31:0] $end
$var wire 32 ^ pc_ma [31:0] $end
$var wire 32 _ pc_initial_if [31:0] $end
$var wire 32 ` pc_id [31:0] $end
$var wire 32 a pc_ex [31:0] $end
$var wire 1 b pc_enable_internal $end
$var wire 1 c op_sel_id $end
$var wire 1 d op_sel_ex $end
$var wire 2 e mem_write_ma [1:0] $end
$var wire 2 f mem_write_id [1:0] $end
$var wire 2 g mem_write_ex [1:0] $end
$var wire 2 h mem_read_ma [1:0] $end
$var wire 2 i mem_read_id [1:0] $end
$var wire 2 j mem_read_ex [1:0] $end
$var wire 1 k is_load_ex $end
$var wire 5 l instr_wb [4:0] $end
$var wire 5 m instr_ma [4:0] $end
$var wire 32 n instr_id [31:0] $end
$var wire 5 o instr_ex [4:0] $end
$var wire 3 p imm_sel_id [2:0] $end
$var wire 32 q imm_id [31:0] $end
$var wire 32 r imm_ex [31:0] $end
$var wire 1 s if_id_enable_internal $end
$var wire 1 t id_ex_enable_internal $end
$var wire 2 u forward_rs2_internal [1:0] $end
$var wire 2 v forward_rs1_internal [1:0] $end
$var wire 1 w flush_if_id_internal $end
$var wire 1 x flush_id_ex_internal $end
$var wire 32 y dmem_out_wb [31:0] $end
$var wire 32 z dmem_data_in [31:0] $end
$var wire 2 { branch_jump_id [1:0] $end
$var wire 2 | branch_jump_ex [1:0] $end
$var wire 5 } aluop_id [4:0] $end
$var wire 32 ~ alu_result_wb [31:0] $end
$var wire 32 !" alu_result_ma [31:0] $end
$var wire 32 "" alu_result_ex [31:0] $end
$var wire 5 #" alu_op_ex [4:0] $end
$var wire 32 $" alu_input2_ex [31:0] $end
$scope module alu $end
$var wire 32 %" andData [31:0] $end
$var wire 32 &" mulhData [31:0] $end
$var wire 32 '" mulhsuData [31:0] $end
$var wire 32 (" mulhuData [31:0] $end
$var wire 32 )" orData [31:0] $end
$var wire 32 *" xorData [31:0] $end
$var wire 32 +" subData [31:0] $end
$var wire 32 ," srlData [31:0] $end
$var wire 32 -" sraData [31:0] $end
$var wire 32 ." sltuData [31:0] $end
$var wire 32 /" sltData [31:0] $end
$var wire 32 0" sllData [31:0] $end
$var wire 32 1" remuData [31:0] $end
$var wire 32 2" remData [31:0] $end
$var wire 32 3" mulData [31:0] $end
$var wire 32 4" divuData [31:0] $end
$var wire 32 5" divData [31:0] $end
$var wire 32 6" addData [31:0] $end
$var wire 5 7" SELECT [4:0] $end
$var wire 32 8" DATA2 [31:0] $end
$var wire 32 9" DATA1 [31:0] $end
$var reg 32 :" RESULT [31:0] $end
$var reg 1 D ZERO $end
$upscope $end
$scope module alu_input2_mux $end
$var wire 1 d sel $end
$var wire 32 ;" out [31:0] $end
$var wire 32 <" in1 [31:0] $end
$var wire 32 =" in0 [31:0] $end
$upscope $end
$scope module branch_selector $end
$var wire 1 D ZERO $end
$var wire 2 >" BRANCH_SEL [1:0] $end
$var reg 1 X PC_SEL $end
$upscope $end
$scope module control_unit $end
$var wire 3 ?" funct3 [2:0] $end
$var wire 7 @" funct7 [6:0] $end
$var wire 7 A" opcode [6:0] $end
$var wire 2 B" write_back_sel [1:0] $end
$var wire 1 c use_imm $end
$var wire 1 T reg_write_en $end
$var wire 2 C" mem_write [1:0] $end
$var wire 2 D" mem_read [1:0] $end
$var wire 3 E" imm_sel [2:0] $end
$var wire 2 F" branch_sel [1:0] $end
$var wire 5 G" alu_op [4:0] $end
$upscope $end
$scope module data_mux $end
$var wire 32 H" in3 [31:0] $end
$var wire 2 I" sel [1:0] $end
$var wire 32 J" out [31:0] $end
$var wire 32 K" in2 [31:0] $end
$var wire 32 L" in1 [31:0] $end
$var wire 32 M" in0 [31:0] $end
$upscope $end
$scope module ex_ma_reg $end
$var wire 32 N" ALU_RESULT [31:0] $end
$var wire 1 4 CLK $end
$var wire 1 X PC_SEL $end
$var wire 1 5 RESET $end
$var wire 2 O" REG_WRITE_SEL [1:0] $end
$var wire 1 U REG_WRITE_ENABLE $end
$var wire 32 P" PC_PLUS_4 [31:0] $end
$var wire 2 Q" MEM_WRITE [1:0] $end
$var wire 2 R" MEM_READ [1:0] $end
$var wire 32 S" IMMEDIATE [31:0] $end
$var wire 5 T" DEST_REG [4:0] $end
$var reg 32 U" OUT_ALU_RESULT [31:0] $end
$var reg 5 V" OUT_DEST_REG [4:0] $end
$var reg 32 W" OUT_IMMEDIATE [31:0] $end
$var reg 2 X" OUT_MEM_READ [1:0] $end
$var reg 2 Y" OUT_MEM_WRITE [1:0] $end
$var reg 32 Z" OUT_PC_PLUS_4 [31:0] $end
$var reg 1 W OUT_PC_SEL $end
$var reg 1 S OUT_REG_WRITE_ENABLE $end
$var reg 2 [" OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module forwarding_unit $end
$var wire 32 \" alu_result_ex [31:0] $end
$var wire 32 ]" alu_result_ma [31:0] $end
$var wire 32 ^" reg_write_data_wb [31:0] $end
$var wire 32 _" rs2_data_id [31:0] $end
$var wire 32 `" rs1_data_id [31:0] $end
$var wire 2 a" forward_rs2 [1:0] $end
$var wire 2 b" forward_rs1 [1:0] $end
$var reg 32 c" rs1_data_forwarded [31:0] $end
$var reg 32 d" rs2_data_forwarded [31:0] $end
$upscope $end
$scope module hazard_control_unit $end
$var wire 1 X pc_sel_ex $end
$var wire 1 E stall_pipeline $end
$var wire 2 e" branch_jump_ex [1:0] $end
$var reg 1 x flush_id_ex $end
$var reg 1 w flush_if_id $end
$var reg 1 t id_ex_enable $end
$var reg 1 s if_id_enable $end
$var reg 1 b pc_enable $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 5 f" rd_ma [4:0] $end
$var wire 1 S reg_write_enable_ma $end
$var wire 5 g" rs1_id [4:0] $end
$var wire 5 h" rs2_id [4:0] $end
$var wire 1 R reg_write_enable_wb $end
$var wire 1 U reg_write_enable_ex $end
$var wire 5 i" rd_wb [4:0] $end
$var wire 5 j" rd_ex [4:0] $end
$var wire 1 k is_load_ex $end
$var reg 2 k" forward_rs1 [1:0] $end
$var reg 2 l" forward_rs2 [1:0] $end
$var reg 1 E stall_pipeline $end
$scope function check_hazard $end
$upscope $end
$upscope $end
$scope module id_ex_reg $end
$var wire 5 m" ALU_OP [4:0] $end
$var wire 2 n" BRANCH_JUMP [1:0] $end
$var wire 1 4 CLK $end
$var wire 5 o" DEST_REG [4:0] $end
$var wire 1 t ENABLE $end
$var wire 1 x FLUSH $end
$var wire 1 ? IS_LOAD $end
$var wire 2 p" MEM_READ [1:0] $end
$var wire 2 q" MEM_WRITE [1:0] $end
$var wire 1 c OP_SEL $end
$var wire 32 r" READ_DATA1 [31:0] $end
$var wire 32 s" READ_DATA2 [31:0] $end
$var wire 1 T REG_WRITE_ENABLE $end
$var wire 2 t" REG_WRITE_SEL [1:0] $end
$var wire 1 5 RESET $end
$var wire 32 u" PC_PLUS_4 [31:0] $end
$var wire 32 v" IMMEDIATE [31:0] $end
$var reg 5 w" OUT_ALU_OP [4:0] $end
$var reg 2 x" OUT_BRANCH_JUMP [1:0] $end
$var reg 5 y" OUT_DEST_REG [4:0] $end
$var reg 32 z" OUT_IMMEDIATE [31:0] $end
$var reg 1 k OUT_IS_LOAD $end
$var reg 2 {" OUT_MEM_READ [1:0] $end
$var reg 2 |" OUT_MEM_WRITE [1:0] $end
$var reg 1 d OUT_OP_SEL $end
$var reg 32 }" OUT_PC_PLUS_4 [31:0] $end
$var reg 32 ~" OUT_READ_DATA1 [31:0] $end
$var reg 32 !# OUT_READ_DATA2 [31:0] $end
$var reg 1 U OUT_REG_WRITE_ENABLE $end
$var reg 2 "# OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module if_id_reg $end
$var wire 1 4 CLK $end
$var wire 1 s ENABLE $end
$var wire 1 w FLUSH $end
$var wire 32 ## INSTRUCTION [31:0] $end
$var wire 1 5 RESET $end
$var wire 32 $# PC_PLUS_4 [31:0] $end
$var reg 32 %# OUT_INSTRUCTION [31:0] $end
$var reg 32 &# OUT_PC_PLUS_4 [31:0] $end
$upscope $end
$scope module ma_wb_reg $end
$var wire 32 '# ALU_RESULT [31:0] $end
$var wire 1 4 CLK $end
$var wire 32 (# DATA_OUT [31:0] $end
$var wire 5 )# DEST_REG [4:0] $end
$var wire 1 S REG_WRITE_ENABLE $end
$var wire 2 *# REG_WRITE_SEL [1:0] $end
$var wire 1 5 RESET $end
$var wire 32 +# PC_PLUS_4 [31:0] $end
$var reg 32 ,# OUT_ALU_RESULT [31:0] $end
$var reg 32 -# OUT_DATA_OUT [31:0] $end
$var reg 5 .# OUT_DEST_REG [4:0] $end
$var reg 32 /# OUT_PC_PLUS_4 [31:0] $end
$var reg 1 R OUT_REG_WRITE_ENABLE $end
$var reg 2 0# OUT_REG_WRITE_SEL [1:0] $end
$upscope $end
$scope module pc $end
$var wire 1 4 clk $end
$var wire 1 b enable $end
$var wire 1 5 reset $end
$var wire 32 1# pc_in [31:0] $end
$var reg 32 2# pc_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 3# pc_in [31:0] $end
$var wire 32 4# pc_out [31:0] $end
$upscope $end
$scope module pc_adder_ma $end
$var wire 32 5# pc_in [31:0] $end
$var wire 32 6# pc_out [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 7# in0 [31:0] $end
$var wire 1 W sel $end
$var wire 32 8# out [31:0] $end
$var wire 32 9# in1 [31:0] $end
$upscope $end
$scope module pc_offset_adder $end
$var wire 32 :# a [31:0] $end
$var wire 32 ;# b [31:0] $end
$var wire 32 <# sum [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 4 CLK $end
$var wire 32 =# DATA_OUT1 [31:0] $end
$var wire 32 ># DATA_OUT2 [31:0] $end
$var wire 5 ?# OUT_ADDR1 [4:0] $end
$var wire 5 @# OUT_ADDR2 [4:0] $end
$var wire 1 5 RESET $end
$var wire 5 A# WRITE_ADDR [4:0] $end
$var wire 32 B# WRITE_DATA [31:0] $end
$var wire 1 R WRITE_ENABLE $end
$var integer 32 C# i [31:0] $end
$upscope $end
$scope module sign_extender $end
$var wire 3 D# imm_sel [2:0] $end
$var wire 25 E# instr_25 [24:0] $end
$var wire 32 F# imm_u [31:0] $end
$var wire 12 G# imm_s [11:0] $end
$var wire 21 H# imm_j [20:0] $end
$var wire 12 I# imm_i [11:0] $end
$var wire 13 J# imm_b [12:0] $end
$var reg 32 K# imm_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 L# \REGISTERS[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 M# \REGISTERS[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 N# \REGISTERS[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 O# \REGISTERS[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 P# \REGISTERS[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 Q# \REGISTERS[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 R# \REGISTERS[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 S# \REGISTERS[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 T# \REGISTERS[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 U# \REGISTERS[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 V# \REGISTERS[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 W# \REGISTERS[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 X# \REGISTERS[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 Y# \REGISTERS[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 Z# \REGISTERS[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 [# \REGISTERS[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 \# \REGISTERS[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 ]# \REGISTERS[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 ^# \REGISTERS[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 _# \REGISTERS[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 `# \REGISTERS[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 a# \REGISTERS[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 b# \REGISTERS[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 c# \REGISTERS[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 d# \REGISTERS[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 e# \REGISTERS[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 f# \REGISTERS[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 g# \REGISTERS[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 h# \REGISTERS[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 i# \REGISTERS[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 j# \REGISTERS[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hazard_test_with_memory $end
$scope module cpu_inst $end
$scope module reg_file $end
$var reg 32 k# \REGISTERS[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
b0 K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
bx D#
b100000 C#
bx B#
b0 A#
b0 @#
b0 ?#
bx >#
bx =#
b100 <#
b0 ;#
b0 :#
b100 9#
bx 8#
bx 7#
bx 6#
b0 5#
bx 4#
b0 3#
b0 2#
bx 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
bx +#
b0 *#
b0 )#
b10101010 (#
b0 '#
b0 &#
b0 %#
b0 $#
b100000000000010010011 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
bx t"
bx s"
bx r"
bx q"
bx p"
b0 o"
bx n"
bx m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
bx d"
bx c"
b0 b"
b0 a"
bx `"
bx _"
bx ^"
b0 ]"
bx \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
bx N"
b0 M"
b0 L"
b0 K"
bx J"
b0 I"
b0 H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
bx ;"
bx :"
b0 9"
bx 8"
b0 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
b0 #"
bx ""
b0 !"
b0 ~
bx }
b0 |
bx {
b0 z
b0 y
0x
0w
b0 v
b0 u
1t
1s
b0 r
b0 q
bx p
b0 o
b0 n
b0 m
b0 l
0k
b0 j
bx i
b0 h
b0 g
bx f
b0 e
0d
xc
1b
b0 a
b0 `
bx _
b0 ^
b0 ]
bx \
bx [
b0 Z
b100 Y
0X
0W
bx V
0U
xT
0S
0R
b0 Q
bx P
b0 O
b0 N
b0 M
b0 L
b0 K
bx J
bx I
b0 H
bx G
bx F
0E
0D
bx C
bx B
b0 A
b0 @
z?
b100000000000010010011 >
b0 =
b0 <
b10101010 ;
bx :
bx 9
bx 8
bx 7
b100000 6
15
04
b0 3
b0 2
01
00
b0 /
b0 .
1-
1,
b0 +
b0 *
1)
b0 (
b0 '
b0 &
bx %
bx $
0#
b100000000000010010011 "
b10101010 !
$end
#1000
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 $"
b0 8"
b0 ;"
b0 V
b0 J"
b0 ^"
b0 B#
b100 \
b100 4#
b100 7#
b100 [
b100 +#
b100 6#
#2000
b0 -"
b0 ,"
b0 0"
b100 _
b100 1#
b100 8#
b0 %"
b0 p
b0 E"
b0 D#
b0 f
b0 C"
b0 q"
b0 i
b0 D"
b0 p"
b1 P
b1 B"
b1 t"
b0 {
b0 F"
b0 n"
#3000
b0 $
b0 C
b0 G
b0 d"
b0 s"
b0 %
b0 B
b0 J
b0 c"
b0 r"
1D
b0 ""
b0 :"
b0 N"
b0 \"
b0 I
b0 `"
b0 =#
b0 F
b0 _"
b0 >#
b0 ."
b0 /"
b0 )"
b0 *"
b0 6"
1T
0c
b0 }
b0 G"
b0 m"
#4000
b0 +"
b0 ("
b0 '"
b0 &"
#5000
b0 1"
b0 2"
b0 4"
b0 5"
b0 3"
14
#10000
b100000 C#
04
#11000
b0 k#
b0 j#
b0 i#
b0 h#
b0 g#
b0 f#
b0 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
#15000
14
#20000
04
05
#25000
b1 q
b1 v"
b1 K#
b1 I#
b1 G#
b100000000000 J#
b100000000000000000000 F#
b100000000000 H#
b1 o"
b10000000000001 E#
b10011 A"
b1 &
b1 A
b1 L
b1 h"
b1 @#
b10101010 y
b10101010 K"
b10101010 -#
b100 Z
b100 M"
b100 /#
zk
1U
b1 Q
b1 O"
b1 "#
b100000000000010010011 n
b100000000000010010011 %#
b100000000000010010011 7
b100000000000010010011 9
14
#26000
b100 V
b100 J"
b100 ^"
b100 B#
#27000
b100000000000100010011 "
b100000000000100010011 >
b100000000000100010011 ##
b100 (
b100 ]
b100 $#
b100 2#
b100 3#
#28000
b1000 \
b1000 4#
b1000 7#
1c
#29000
b1000 _
b1000 1#
b1000 8#
#30000
04
#35000
b10 G#
b10 J#
b10 o"
b10000000000010 E#
b1 .
b1 =
b1 u
b1 a"
b1 l"
b100 `
b100 u"
b100 &#
b100000000000100010011 n
b100000000000100010011 %#
1d
b1 r
b1 <"
b1 S"
b1 z"
b1 o
b1 T"
b1 j"
b1 y"
1S
b1 O
b1 ["
b1 *#
b0 8
b100000000000100010011 7
b100000000000100010011 9
14
#36000
b1 $"
b1 8"
b1 ;"
#37000
b1000001000011001100011 "
b1000001000011001100011 >
b1000001000011001100011 ##
b1000 (
b1000 ]
b1000 $#
b1000 2#
b1000 3#
#38000
b1 $
b1 C
b1 G
b1 d"
b1 s"
0D
b1 ""
b1 :"
b1 N"
b1 \"
b1100 \
b1100 4#
b1100 7#
b1 ."
b1 /"
b1 )"
b1 *"
b1 6"
#39000
b1100 _
b1100 1#
b1100 8#
b11111111111111111111111111111111 +"
#40000
04
#45000
b10 q
b10 v"
b10 K#
b10 I#
b1100 G#
b1100 J#
b1000001000000000000000 F#
b1000000000000010 H#
b1 %
b1 B
b1 J
b1 c"
b1 r"
b10 /
b10 <
b10 v
b10 b"
b10 k"
b1100 o"
b100000100001100 E#
b1100011 A"
b10 &
b10 A
b10 L
b10 h"
b10 @#
b1 '
b1 @
b1 M
b1 g"
b1 ?#
1R
b1 N
b1 I"
b1 0#
b101 Y
b101 9#
b101 <#
b1 2
b1 z
b1 W"
b1 ;#
b1 m
b1 V"
b1 f"
b1 )#
b1 3
b1 !"
b1 U"
b1 ]"
b1 '#
b1 H
b1 ="
b1 !#
b100 a
b100 P"
b100 }"
b10 o
b10 T"
b10 j"
b10 y"
b1000 `
b1000 u"
b1000 &#
b1000001000011001100011 n
b1000001000011001100011 %#
b1 8
b1000001000011001100011 7
b1000001000011001100011 9
14
#46000
b0 V
b0 J"
b0 ^"
b0 B#
#47000
b110001100000000000110010011 "
b110001100000000000110010011 >
b110001100000000000110010011 ##
b1100 (
b1100 ]
b1100 $#
b1100 2#
b1100 3#
b1100 q
b1100 v"
b1100 K#
b10 p
b10 E"
b10 D#
b1 {
b1 F"
b1 n"
#48000
b10000 \
b10000 4#
b10000 7#
0c
b10000 }
b10000 G"
b10000 m"
0T
#49000
b10000 _
b10000 1#
b10000 8#
#50000
04
#55000
b100001100010 q
b100001100010 v"
b100001100010 K#
b0 $
b0 C
b0 G
b0 d"
b0 s"
b1100011 I#
b1100011 G#
b100001100010 J#
b110001100000000000000000000 F#
b100001100010 H#
b0 %
b0 B
b0 J
b0 c"
b0 r"
b11 o"
b11000110000000000011 E#
b11 @"
b10011 A"
b11 &
b11 A
b11 L
b11 h"
b11 @#
b0 '
b0 @
b0 M
b0 g"
b0 ?#
b11111111111111111111111111111111 ""
b11111111111111111111111111111111 :"
b11111111111111111111111111111111 N"
b11111111111111111111111111111111 \"
b0 .
b0 =
b0 u
b0 a"
b0 l"
b0 /
b0 <
b0 v
b0 b"
b0 k"
b1100 `
b1100 u"
b1100 &#
b110001100000000000110010011 n
b110001100000000000110010011 %#
0U
0d
b1 |
b1 >"
b1 e"
b1 x"
b10000 #"
b10000 7"
b10000 w"
b1100 r
b1100 <"
b1100 S"
b1100 z"
b1 K
b1 9"
b1 ~"
b1000 a
b1000 P"
b1000 }"
b1100 o
b1100 T"
b1100 j"
b1100 y"
b1001 Y
b1001 9#
b1001 <#
b100 ^
b100 Z"
b100 5#
b100 :#
b10 m
b10 V"
b10 f"
b10 )#
b1 l
b1 i"
b1 .#
b1 A#
b1 ~
b1 L"
b1 ,#
b1 8
b110001100000000000110010011 7
b110001100000000000110010011 9
14
#56000
b1 V
b1 J"
b1 ^"
b1 B#
b10 0"
b1000 [
b1000 +#
b1000 6#
#57000
b101100000000000001010010011 "
b101100000000000001010010011 >
b101100000000000001010010011 ##
b10000 (
b10000 ]
b10000 $#
b10000 2#
b10000 3#
b1100011 q
b1100011 v"
b1100011 K#
b0 p
b0 E"
b0 D#
b0 {
b0 F"
b0 n"
b0 ."
b0 /"
b1 %"
b0 *"
b10 6"
#58000
11
1x
10
1w
1X
1D
b0 ""
b0 :"
b0 N"
b0 \"
b10100 \
b10100 4#
b10100 7#
1c
b0 }
b0 G"
b0 m"
1T
b0 +"
#59000
b10100 _
b10100 1#
b10100 8#
b1 4"
b1 5"
b1 3"
#60000
04
#61000
b1 M#
#65000
b0 q
b0 v"
b0 K#
b0 I#
b0 G#
b0 J#
b0 F#
b0 H#
0X
01
0x
00
0w
0D
b10 ""
b10 :"
b10 N"
b10 \"
b0 o"
b0 E#
b0 @"
b0 &
b0 A
b0 L
b0 h"
b0 @#
b1000 Z
b1000 M"
b1000 /#
b10 l
b10 i"
b10 .#
b10 A#
1W
0S
b1100 2
b1100 z
b1100 W"
b1100 ;#
b11000 Y
b11000 9#
b11000 <#
b1000 ^
b1000 Z"
b1000 5#
b1000 :#
b1100 m
b1100 V"
b1100 f"
b1100 )#
b0 3
b0 !"
b0 U"
b0 ]"
b0 '#
0k
b0 Q
b0 O"
b0 "#
b0 |
b0 >"
b0 e"
b0 x"
b0 #"
b0 7"
b0 w"
b0 r
b0 <"
b0 S"
b0 z"
b0 H
b0 ="
b0 !#
b0 K
b0 9"
b0 ~"
b1100 a
b1100 P"
b1100 }"
b0 o
b0 T"
b0 j"
b0 y"
b10000 `
b10000 u"
b10000 &#
b10011 n
b10011 %#
b0 8
b101100000000000001010010011 7
b101100000000000001010010011 9
14
#66000
b11000 _
b11000 1#
b11000 8#
b0 $"
b0 8"
b0 ;"
b1100 [
b1100 +#
b1100 6#
b0 0"
#67000
b10101000000000001000010011 "
b10101000000000001000010011 >
b10101000000000001000010011 ##
b11000 (
b11000 ]
b11000 $#
b11000 2#
b11000 3#
b0 %"
#68000
1D
b0 ""
b0 :"
b0 N"
b0 \"
b11100 \
b11100 4#
b11100 7#
b0 )"
b0 6"
#69000
b0 4"
b0 5"
b0 3"
#70000
04
#71000
b1 N#
#75000
b101010 q
b101010 v"
b101010 K#
b101010 I#
b100100 G#
b100100 J#
b10101000000000000000000000 F#
b101010 H#
b100 o"
b1010100000000000100 E#
b1 @"
b1010 &
b1010 A
b1010 L
b1010 h"
b1010 @#
b11000 `
b11000 u"
b11000 &#
b10101000000000001000010011 n
b10101000000000001000010011 %#
zk
1U
b1 Q
b1 O"
b1 "#
1d
b10000 a
b10000 P"
b10000 }"
0W
b0 O
b0 ["
b0 *#
b0 2
b0 z
b0 W"
b0 ;#
b10000 Y
b10000 9#
b10000 <#
b1100 ^
b1100 Z"
b1100 5#
b1100 :#
b0 m
b0 V"
b0 f"
b0 )#
0R
b1100 Z
b1100 M"
b1100 /#
b1100 l
b1100 i"
b1100 .#
b1100 A#
b0 ~
b0 L"
b0 ,#
b10101000000000001000010011 7
b10101000000000001000010011 9
14
#76000
b0 V
b0 J"
b0 ^"
b0 B#
b11100 _
b11100 1#
b11100 8#
b10000 [
b10000 +#
b10000 6#
#77000
bx "
bx >
bx ##
b11100 (
b11100 ]
b11100 $#
b11100 2#
b11100 3#
#78000
b100000 \
b100000 4#
b100000 7#
#79000
b100000 _
b100000 1#
b100000 8#
#80000
04
#85000
bx q
bx v"
bx K#
bx I#
bx G#
bx0 J#
bx000000000000 F#
bx0 H#
bx o"
bx E#
bx @"
bx ?"
bx A"
bx &
bx A
bx L
bx h"
bx @#
bx '
bx @
bx M
bx g"
bx ?#
b0 N
b0 I"
b0 0#
b10000 Z
b10000 M"
b10000 /#
b0 l
b0 i"
b0 .#
b0 A#
1S
b1 O
b1 ["
b1 *#
b10100 Y
b10100 9#
b10100 <#
b10000 ^
b10000 Z"
b10000 5#
b10000 :#
b101010 r
b101010 <"
b101010 S"
b101010 z"
b11000 a
b11000 P"
b11000 }"
b100 o
b100 T"
b100 j"
b100 y"
b11100 `
b11100 u"
b11100 &#
bx n
bx %#
14
#86000
b10000 V
b10000 J"
b10000 ^"
b10000 B#
b101010 $"
b101010 8"
b101010 ;"
b10100 [
b10100 +#
b10100 6#
#87000
b100000 (
b100000 ]
b100000 $#
b100000 2#
b100000 3#
b0 q
b0 v"
b0 K#
bx $
bx C
bx G
bx d"
bx s"
bx %
bx B
bx J
bx c"
bx r"
bx p
bx E"
bx D#
b0x f
b0x C"
b0x q"
b0x i
b0x D"
b0x p"
bx P
bx B"
bx t"
bx {
bx F"
bx n"
bx F
bx _"
bx >#
bx I
bx `"
bx =#
#88000
0D
b101010 ""
b101010 :"
b101010 N"
b101010 \"
b100100 \
b100100 4#
b100100 7#
b1 ."
b1 /"
b101010 )"
b101010 *"
b101010 6"
xc
xT
bx }
bx G"
bx m"
#89000
b100100 _
b100100 1#
b100100 8#
b11111111111111111111111111010110 +"
#90000
04
#95000
1D
b0 ""
b0 :"
b0 N"
b0 \"
b101010101 !
b101010101 ;
b101010101 (#
b100000 `
b100000 u"
b100000 &#
xU
bx Q
bx O"
bx "#
b0x j
b0x R"
b0x {"
b0x g
b0x Q"
b0x |"
xd
bx |
bx >"
bx e"
bx x"
bx #"
bx 7"
bx w"
b0 r
b0 <"
b0 S"
b0 z"
bx H
bx ="
bx !#
bx K
bx 9"
bx ~"
b11100 a
b11100 P"
b11100 }"
bx o
bx T"
bx j"
bx y"
b101010 2
b101010 z
b101010 W"
b101010 ;#
b1000110 Y
b1000110 9#
b1000110 <#
b11000 ^
b11000 Z"
b11000 5#
b11000 :#
b100 m
b100 V"
b100 f"
b100 )#
b101010 3
b101010 !"
b101010 U"
b101010 ]"
b101010 '#
1R
b1 N
b1 I"
b1 0#
b10100 Z
b10100 M"
b10100 /#
14
#96000
bx $"
bx 8"
bx ;"
b0 V
b0 J"
b0 ^"
b0 B#
bx -"
b0xxxxxxxxxxxxxxxxxxxxxx ,"
bx0000000000 0"
b11100 [
b11100 +#
b11100 6#
#97000
b100100 (
b100100 ]
b100100 $#
b100100 2#
b100100 3#
bx ,"
bx 0"
b0x ."
b0x /"
bx *"
bx 6"
#98000
b101000 \
b101000 4#
b101000 7#
bx %"
bx )"
bx +"
#99000
b101000 _
b101000 1#
b101000 8#
bx 1"
bx 2"
bx 4"
bx 5"
bx 3"
#100000
04
#105000
b10101010 !
b10101010 ;
b10101010 (#
b101010101 y
b101010101 K"
b101010101 -#
b11100 Z
b11100 M"
b11100 /#
b100 l
b100 i"
b100 .#
b100 A#
b101010 ~
b101010 L"
b101010 ,#
xS
bx O
bx ["
bx *#
b0x +
b0x h
b0x X"
b0x *
b0x e
b0x Y"
b0 2
b0 z
b0 W"
b0 ;#
b100000 Y
b100000 9#
b100000 <#
b11100 ^
b11100 Z"
b11100 5#
b11100 :#
bx m
bx V"
bx f"
bx )#
b0 3
b0 !"
b0 U"
b0 ]"
b0 '#
b100000 a
b100000 P"
b100000 }"
b100100 `
b100100 u"
b100100 &#
14
#106000
b101010 V
b101010 J"
b101010 ^"
b101010 B#
b100000 [
b100000 +#
b100000 6#
#107000
b101000 (
b101000 ]
b101000 $#
b101000 2#
b101000 3#
#108000
b101100 \
b101100 4#
b101100 7#
#109000
b101100 _
b101100 1#
b101100 8#
#110000
04
#111000
b101010 P#
#115000
b101000 `
b101000 u"
b101000 &#
b100100 a
b100100 P"
b100100 }"
b100100 Y
b100100 9#
b100100 <#
b100000 ^
b100000 Z"
b100000 5#
b100000 :#
xR
bx N
bx I"
bx 0#
b10101010 y
b10101010 K"
b10101010 -#
b100000 Z
b100000 M"
b100000 /#
bx l
bx i"
bx .#
bx A#
b0 ~
b0 L"
b0 ,#
14
#116000
b0x0x0x0x0 V
b0x0x0x0x0 J"
b0x0x0x0x0 ^"
b0x0x0x0x0 B#
b100100 [
b100100 +#
b100100 6#
#117000
b101100 (
b101100 ]
b101100 $#
b101100 2#
b101100 3#
#118000
b110000 \
b110000 4#
b110000 7#
#119000
b110000 _
b110000 1#
b110000 8#
#120000
04
#125000
b100100 Z
b100100 M"
b100100 /#
b101000 Y
b101000 9#
b101000 <#
b100100 ^
b100100 Z"
b100100 5#
b100100 :#
b101000 a
b101000 P"
b101000 }"
b101100 `
b101100 u"
b101100 &#
14
#126000
b0x0x0xxx0 V
b0x0x0xxx0 J"
b0x0x0xxx0 ^"
b0x0x0xxx0 B#
b101000 [
b101000 +#
b101000 6#
#127000
b110000 (
b110000 ]
b110000 $#
b110000 2#
b110000 3#
#128000
b110100 \
b110100 4#
b110100 7#
#129000
b110100 _
b110100 1#
b110100 8#
#130000
04
#135000
b110000 `
b110000 u"
b110000 &#
b101100 a
b101100 P"
b101100 }"
b101100 Y
b101100 9#
b101100 <#
b101000 ^
b101000 Z"
b101000 5#
b101000 :#
b101000 Z
b101000 M"
b101000 /#
14
#136000
b0x0x0x0x0 V
b0x0x0x0x0 J"
b0x0x0x0x0 ^"
b0x0x0x0x0 B#
b101100 [
b101100 +#
b101100 6#
#137000
b110100 (
b110100 ]
b110100 $#
b110100 2#
b110100 3#
#138000
b111000 \
b111000 4#
b111000 7#
#139000
b111000 _
b111000 1#
b111000 8#
#140000
04
#145000
b101100 Z
b101100 M"
b101100 /#
b110000 Y
b110000 9#
b110000 <#
b101100 ^
b101100 Z"
b101100 5#
b101100 :#
b110000 a
b110000 P"
b110000 }"
b110100 `
b110100 u"
b110100 &#
14
#146000
b0x0x0xxx0 V
b0x0x0xxx0 J"
b0x0x0xxx0 ^"
b0x0x0xxx0 B#
b110000 [
b110000 +#
b110000 6#
#147000
b111000 (
b111000 ]
b111000 $#
b111000 2#
b111000 3#
#148000
b111100 \
b111100 4#
b111100 7#
#149000
b111100 _
b111100 1#
b111100 8#
#150000
04
#155000
b111000 `
b111000 u"
b111000 &#
b110100 a
b110100 P"
b110100 }"
b110100 Y
b110100 9#
b110100 <#
b110000 ^
b110000 Z"
b110000 5#
b110000 :#
b110000 Z
b110000 M"
b110000 /#
14
#156000
b0x0xxx0x0 V
b0x0xxx0x0 J"
b0x0xxx0x0 ^"
b0x0xxx0x0 B#
b110100 [
b110100 +#
b110100 6#
#157000
b111100 (
b111100 ]
b111100 $#
b111100 2#
b111100 3#
#158000
b1000000 \
b1000000 4#
b1000000 7#
#159000
b1000000 _
b1000000 1#
b1000000 8#
#160000
04
#165000
b110100 Z
b110100 M"
b110100 /#
b111000 Y
b111000 9#
b111000 <#
b110100 ^
b110100 Z"
b110100 5#
b110100 :#
b111000 a
b111000 P"
b111000 }"
b111100 `
b111100 u"
b111100 &#
14
#166000
b0x0xxxxx0 V
b0x0xxxxx0 J"
b0x0xxxxx0 ^"
b0x0xxxxx0 B#
b111000 [
b111000 +#
b111000 6#
#167000
b1000000 (
b1000000 ]
b1000000 $#
b1000000 2#
b1000000 3#
#168000
b1000100 \
b1000100 4#
b1000100 7#
#169000
b1000100 _
b1000100 1#
b1000100 8#
#170000
04
#175000
b1000000 `
b1000000 u"
b1000000 &#
b111100 a
b111100 P"
b111100 }"
b111100 Y
b111100 9#
b111100 <#
b111000 ^
b111000 Z"
b111000 5#
b111000 :#
b111000 Z
b111000 M"
b111000 /#
14
#176000
b0x0xxx0x0 V
b0x0xxx0x0 J"
b0x0xxx0x0 ^"
b0x0xxx0x0 B#
b111100 [
b111100 +#
b111100 6#
#177000
b1000100 (
b1000100 ]
b1000100 $#
b1000100 2#
b1000100 3#
#178000
b1001000 \
b1001000 4#
b1001000 7#
#179000
b1001000 _
b1001000 1#
b1001000 8#
#180000
04
#185000
b111100 Z
b111100 M"
b111100 /#
b1000000 Y
b1000000 9#
b1000000 <#
b111100 ^
b111100 Z"
b111100 5#
b111100 :#
b1000000 a
b1000000 P"
b1000000 }"
b1000100 `
b1000100 u"
b1000100 &#
14
#186000
b0x0xxxxx0 V
b0x0xxxxx0 J"
b0x0xxxxx0 ^"
b0x0xxxxx0 B#
b1000000 [
b1000000 +#
b1000000 6#
#187000
b1001000 (
b1001000 ]
b1001000 $#
b1001000 2#
b1001000 3#
#188000
b1001100 \
b1001100 4#
b1001100 7#
#189000
b1001100 _
b1001100 1#
b1001100 8#
#190000
04
#195000
b1001000 `
b1001000 u"
b1001000 &#
b1000100 a
b1000100 P"
b1000100 }"
b1000100 Y
b1000100 9#
b1000100 <#
b1000000 ^
b1000000 Z"
b1000000 5#
b1000000 :#
b1000000 Z
b1000000 M"
b1000000 /#
14
#196000
b0xxx0x0x0 V
b0xxx0x0x0 J"
b0xxx0x0x0 ^"
b0xxx0x0x0 B#
b1000100 [
b1000100 +#
b1000100 6#
#197000
b1001100 (
b1001100 ]
b1001100 $#
b1001100 2#
b1001100 3#
#198000
b1010000 \
b1010000 4#
b1010000 7#
#199000
b1010000 _
b1010000 1#
b1010000 8#
#200000
04
#205000
b1000100 Z
b1000100 M"
b1000100 /#
b1001000 Y
b1001000 9#
b1001000 <#
b1000100 ^
b1000100 Z"
b1000100 5#
b1000100 :#
b1001000 a
b1001000 P"
b1001000 }"
b1001100 `
b1001100 u"
b1001100 &#
14
#206000
b0xxx0xxx0 V
b0xxx0xxx0 J"
b0xxx0xxx0 ^"
b0xxx0xxx0 B#
b1001000 [
b1001000 +#
b1001000 6#
#207000
b1010000 (
b1010000 ]
b1010000 $#
b1010000 2#
b1010000 3#
#208000
b1010100 \
b1010100 4#
b1010100 7#
#209000
b1010100 _
b1010100 1#
b1010100 8#
#210000
04
#215000
b1010000 `
b1010000 u"
b1010000 &#
b1001100 a
b1001100 P"
b1001100 }"
b1001100 Y
b1001100 9#
b1001100 <#
b1001000 ^
b1001000 Z"
b1001000 5#
b1001000 :#
b1001000 Z
b1001000 M"
b1001000 /#
14
#216000
b0xxx0x0x0 V
b0xxx0x0x0 J"
b0xxx0x0x0 ^"
b0xxx0x0x0 B#
b1001100 [
b1001100 +#
b1001100 6#
#217000
b1010100 (
b1010100 ]
b1010100 $#
b1010100 2#
b1010100 3#
#218000
b1011000 \
b1011000 4#
b1011000 7#
#219000
b1011000 _
b1011000 1#
b1011000 8#
#220000
04
#225000
b1001100 Z
b1001100 M"
b1001100 /#
b1010000 Y
b1010000 9#
b1010000 <#
b1001100 ^
b1001100 Z"
b1001100 5#
b1001100 :#
b1010000 a
b1010000 P"
b1010000 }"
b1010100 `
b1010100 u"
b1010100 &#
14
#226000
b0xxx0xxx0 V
b0xxx0xxx0 J"
b0xxx0xxx0 ^"
b0xxx0xxx0 B#
b1010000 [
b1010000 +#
b1010000 6#
#227000
b1011000 (
b1011000 ]
b1011000 $#
b1011000 2#
b1011000 3#
#228000
b1011100 \
b1011100 4#
b1011100 7#
#229000
b1011100 _
b1011100 1#
b1011100 8#
#230000
04
#235000
b1011000 `
b1011000 u"
b1011000 &#
b1010100 a
b1010100 P"
b1010100 }"
b1010100 Y
b1010100 9#
b1010100 <#
b1010000 ^
b1010000 Z"
b1010000 5#
b1010000 :#
b1010000 Z
b1010000 M"
b1010000 /#
14
#236000
b0xxxxx0x0 V
b0xxxxx0x0 J"
b0xxxxx0x0 ^"
b0xxxxx0x0 B#
b1010100 [
b1010100 +#
b1010100 6#
#237000
b1011100 (
b1011100 ]
b1011100 $#
b1011100 2#
b1011100 3#
#238000
b1100000 \
b1100000 4#
b1100000 7#
#239000
b1100000 _
b1100000 1#
b1100000 8#
#240000
04
#245000
b1010100 Z
b1010100 M"
b1010100 /#
b1011000 Y
b1011000 9#
b1011000 <#
b1010100 ^
b1010100 Z"
b1010100 5#
b1010100 :#
b1011000 a
b1011000 P"
b1011000 }"
b1011100 `
b1011100 u"
b1011100 &#
14
#246000
b0xxxxxxx0 V
b0xxxxxxx0 J"
b0xxxxxxx0 ^"
b0xxxxxxx0 B#
b1011000 [
b1011000 +#
b1011000 6#
#247000
b1100000 (
b1100000 ]
b1100000 $#
b1100000 2#
b1100000 3#
#248000
b1100100 \
b1100100 4#
b1100100 7#
#249000
b1100100 _
b1100100 1#
b1100100 8#
#250000
04
#255000
b1100000 `
b1100000 u"
b1100000 &#
b1011100 a
b1011100 P"
b1011100 }"
b1011100 Y
b1011100 9#
b1011100 <#
b1011000 ^
b1011000 Z"
b1011000 5#
b1011000 :#
b1011000 Z
b1011000 M"
b1011000 /#
14
#256000
b0xxxxx0x0 V
b0xxxxx0x0 J"
b0xxxxx0x0 ^"
b0xxxxx0x0 B#
b1011100 [
b1011100 +#
b1011100 6#
#257000
b1100100 (
b1100100 ]
b1100100 $#
b1100100 2#
b1100100 3#
#258000
b1101000 \
b1101000 4#
b1101000 7#
#259000
b1101000 _
b1101000 1#
b1101000 8#
#260000
04
#265000
b1011100 Z
b1011100 M"
b1011100 /#
b1100000 Y
b1100000 9#
b1100000 <#
b1011100 ^
b1011100 Z"
b1011100 5#
b1011100 :#
b1100000 a
b1100000 P"
b1100000 }"
b1100100 `
b1100100 u"
b1100100 &#
14
#266000
b0xxxxxxx0 V
b0xxxxxxx0 J"
b0xxxxxxx0 ^"
b0xxxxxxx0 B#
b1100000 [
b1100000 +#
b1100000 6#
#267000
b1101000 (
b1101000 ]
b1101000 $#
b1101000 2#
b1101000 3#
#268000
b1101100 \
b1101100 4#
b1101100 7#
#269000
b1101100 _
b1101100 1#
b1101100 8#
#270000
04
#275000
b1101000 `
b1101000 u"
b1101000 &#
b1100100 a
b1100100 P"
b1100100 }"
b1100100 Y
b1100100 9#
b1100100 <#
b1100000 ^
b1100000 Z"
b1100000 5#
b1100000 :#
b1100000 Z
b1100000 M"
b1100000 /#
14
#276000
b0xxx0x0x0 V
b0xxx0x0x0 J"
b0xxx0x0x0 ^"
b0xxx0x0x0 B#
b1100100 [
b1100100 +#
b1100100 6#
#277000
b1101100 (
b1101100 ]
b1101100 $#
b1101100 2#
b1101100 3#
#278000
b1110000 \
b1110000 4#
b1110000 7#
#279000
b1110000 _
b1110000 1#
b1110000 8#
#280000
04
#285000
b1100100 Z
b1100100 M"
b1100100 /#
b1101000 Y
b1101000 9#
b1101000 <#
b1100100 ^
b1100100 Z"
b1100100 5#
b1100100 :#
b1101000 a
b1101000 P"
b1101000 }"
b1101100 `
b1101100 u"
b1101100 &#
14
#286000
b0xxx0xxx0 V
b0xxx0xxx0 J"
b0xxx0xxx0 ^"
b0xxx0xxx0 B#
b1101000 [
b1101000 +#
b1101000 6#
#287000
b1110000 (
b1110000 ]
b1110000 $#
b1110000 2#
b1110000 3#
#288000
b1110100 \
b1110100 4#
b1110100 7#
#289000
b1110100 _
b1110100 1#
b1110100 8#
#290000
04
#295000
b1110000 `
b1110000 u"
b1110000 &#
b1101100 a
b1101100 P"
b1101100 }"
b1101100 Y
b1101100 9#
b1101100 <#
b1101000 ^
b1101000 Z"
b1101000 5#
b1101000 :#
b1101000 Z
b1101000 M"
b1101000 /#
14
#296000
b0xxx0x0x0 V
b0xxx0x0x0 J"
b0xxx0x0x0 ^"
b0xxx0x0x0 B#
b1101100 [
b1101100 +#
b1101100 6#
#297000
b1110100 (
b1110100 ]
b1110100 $#
b1110100 2#
b1110100 3#
#298000
b1111000 \
b1111000 4#
b1111000 7#
#299000
b1111000 _
b1111000 1#
b1111000 8#
#300000
04
